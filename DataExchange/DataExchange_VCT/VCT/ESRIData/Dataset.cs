///////////////////////////////////////////////////////////
//  Dataset.cs
//  Implementation of the Class Dataset
//  Generated by Enterprise Architect
//  Created on:      08-四月-2011 13:45:30
//  Original author: Administrator
///////////////////////////////////////////////////////////




using DIST.DGP.DataExchange.VCT.FileData;
using DIST.DGP.DataExchange.VCT.ESRIData;
using ESRI.ArcGIS.Geodatabase;
using System.IO;
using System.Windows.Forms;
using ESRI.ArcGIS.Geometry;
using System;
using System.Collections.Generic;
using ESRI.ArcGIS.Carto;
using DIST.DGP.DataExchange.VCT.Metadata;
using ESRI.ArcGIS.DataSourcesGDB;
using System.Collections;
namespace DIST.DGP.DataExchange.VCT.ESRIData {
	/// <summary>
	/// 数据集类
	/// </summary>
	public class Dataset
    {
        #region 属性
       
        /// <summary>
        /// ESRI数据集
        /// </summary>
        public IDataset ESRIDataset
        {
            get
            {
                return m_pIDataset;
            }
            set
            {
                m_pIDataset = value;
            }
        }
        private IDataset m_pIDataset;

       
        /// <summary>
        /// 空间参考
        /// </summary>
        public Projection Projection
        {
            get
            {
                return m_Projection;
            }
            set
            {
                m_Projection = value;
            }
        }
        private Projection m_Projection;


        /// <summary>
        /// MDB数据连接工作空间
        /// </summary>
        public IWorkspace Workspace
        {
            get
            {
                return m_pIWorkspace;
            }
            set
            {
                m_pIWorkspace = value;
            }
        }
        private IWorkspace m_pIWorkspace = null;

        private bool m_bCut = false;
        private IGeometry m_cutGeometry=null;
        #endregion

        /// <summary>
        /// 要素对象列表
        /// </summary>
        private List<TableLayer> m_FeatureList;

        public Dataset(IDataset pIDataset,IWorkspace pWorkspace,bool bCut,IGeometry pCutGeomtry)
        {
            m_pIDataset = pIDataset;
            m_pIWorkspace = pWorkspace;
            m_cutGeometry = pCutGeomtry;
            m_bCut = bCut;
            InitialProjection();
            InitialFeatureList();
		}

        /// <summary>
        /// 从mdb导出到vct时，初始化空间参考
        /// </summary>
        /// <returns></returns>
        private bool InitialProjection()
        {
            if (m_pIDataset == null)
                return false;
            try
            {
                IGeoDataset geoDataset = (IGeoDataset)m_pIDataset;
                ISpatialReference pSpatialReference = geoDataset.SpatialReference;

                m_Projection = new Projection(pSpatialReference, this.m_pIDataset.Workspace);

                return true;
            }
            catch (Exception ex)
            {
                Logger.WriteErrorLog(ex);
                return false;
            }
        }

        /// <summary>
        /// 从mdb到vct转换时，初始化图层列表
        /// </summary>
        private bool InitialFeatureList()
        {
            try
            {
                if (m_pIDataset == null)
                    return false;
                m_FeatureList = new List<TableLayer>();
                IEnumDataset pEnumDataset = m_pIDataset.Subsets;
                IDataset pSet = pEnumDataset.Next();
                while (pSet != null)
                {
                    FeatureLayer pFeatureLayer = null;
                    IFeatureClass pFeatureCls = pSet as IFeatureClass;


                    string sGeometryType = "";
                    ///从配置文件获取要素类型
                    Metadata.MetaTable pMetaTable = Metadata.MetaDataFile.MetaTabls[pSet.Name] as Metadata.MetaTable;
                    if (pMetaTable != null)
                    {
                        sGeometryType = pMetaTable.Type;
                    }
                    else
                    {
                        ///如果不属于标准的数据则不处理
                        pSet = pEnumDataset.Next();
                        continue;
                    }
                    ///根据要素类型创建vct空间数据节点
                    esriGeometryType pFeatureType = pFeatureCls.ShapeType;
                    if (pFeatureType == esriGeometryType.esriGeometryLine
                        || pFeatureType == esriGeometryType.esriGeometryPolyline)
                    {
                        ///构造线节点
                        pFeatureLayer = new LineLayer();
                        if (sGeometryType == "")
                            sGeometryType = "Line";
                    }
                    else if (pFeatureType == esriGeometryType.esriGeometryPolygon)
                    {
                        //构造面节点
                        pFeatureLayer = new PolygonLayer();
                          if (sGeometryType == "")
                            sGeometryType = "Polygon"; 
                    }
                    else if (pFeatureType == esriGeometryType.esriGeometryPoint)
                    {
                        pFeatureLayer = new PointLayer();
                        if (sGeometryType == "")
                            sGeometryType = "Point"; 
                    }
                   
                    ////注记图层
                    if (pFeatureCls.FeatureType == esriFeatureType.esriFTAnnotation)
                    {
                        pFeatureLayer = new AnnotationLayer();
                        pFeatureLayer.GeometryType = "Annotation";
                    }

                    pFeatureLayer.CutGeometry =m_cutGeometry;
                    //挂接空间数据表
                    pFeatureLayer.Table = pSet as ITable;
                    pFeatureLayer.GeometryType = sGeometryType;
                    pFeatureLayer.IsCut = m_bCut;
                    pFeatureLayer.FeatureCode = MetaDataFile.GetFeatureCodeByName(pSet.Name);
                    pFeatureLayer.UpdateFieldIndex();

                    m_FeatureList.Add(pFeatureLayer);
                    pSet = pEnumDataset.Next();
                }

                ///处理属性表集合
                IEnumDataset pAttriTalbelDataSet=  m_pIWorkspace.get_Datasets(esriDatasetType.esriDTTable);
                IDataset pAttriDataset = pAttriTalbelDataSet.Next();
                while (pAttriDataset != null)
                 {
                        TableLayer pAttributeTalbe = new TableLayer();

                        ///从配置文件获取要素类型
                        Metadata.MetaTable pMetaTable = Metadata.MetaDataFile.MetaTabls[pAttriDataset.Name] as Metadata.MetaTable;
                        if (pMetaTable != null)
                        {
                            pAttributeTalbe.GeometryType = pMetaTable.Type;
                            pAttributeTalbe.Table = pAttriDataset as ITable;
                            pAttributeTalbe.UpdateFieldIndex();
                            m_FeatureList.Add(pAttributeTalbe);
                        }
                     pAttriDataset = pAttriTalbelDataSet.Next();
                 }
                return true;
            }
            catch (Exception ex)
            {
                Logger.WriteErrorLog(ex);
                return false;
            }
        }

        public Dataset(IWorkspace pIWorkspace)
        {
            m_pIWorkspace = pIWorkspace;
        }

        /// <summary>
        /// 创建所有空间图层
        /// </summary>
        /// <param name="tableStructureNodes">VCT表结构节点集合</param>
        /// <param name="featureCodeNodes">VCT要素编码节点集合</param>
        public bool CreateFeatureLayers(List<TableStructureNode> tableStructureNodes, Hashtable featureCodeNodes)
        {
            //if (this.m_pIDataset != null)
            //{
                FeatureLayerFactory m_FeatureLayerFactory = new FeatureLayerFactory(this.m_pIDataset,m_pIWorkspace);
                m_FeatureList = m_FeatureLayerFactory.CreateFeatureLayers(tableStructureNodes, featureCodeNodes);
                return true;
            //}
            //return false;
        }


		~Dataset(){

		}

        /// <summary>
        /// 释放esri对象
        /// </summary>
		public virtual void Dispose()
        {
            if (m_FeatureList != null)
            {
                for (int i = 0; i < m_FeatureList.Count; i++)
                {
                    if (m_FeatureList[i] is FeatureLayer)
                    {
                        (m_FeatureList[i] as FeatureLayer).Dispose();
                    }
                }
                m_FeatureList.Clear();
                m_FeatureList = null;
            }
            m_Projection = null;
            if(m_pIDataset!=null)
                System.Runtime.InteropServices.Marshal.ReleaseComObject(m_pIDataset);
            if(m_pIWorkspace!=null)
                System.Runtime.InteropServices.Marshal.ReleaseComObject(m_pIWorkspace);
            GC.Collect();
		}

 

		/// <summary>
		/// 通过要素代码获取要素图层
		/// </summary>
		/// <param name="strFeatureCode">要素代码</param>
        public TableLayer GetFeatureLayerByCode(string strFeatureCode)
        {
            if (m_FeatureList == null)
                return null;
            foreach (TableLayer pFLayer in m_FeatureList)
            {
                if (pFLayer.GetFeatureCodeNode().FeatureCode == strFeatureCode)
                    return pFLayer;
            }
			return null;
		}

		/// <summary>
		/// 通过索引获取要素图层
		/// </summary>
		/// <param name="nIndex">图层索引</param>
		public TableLayer GetFeatureLayerByIndex(int nIndex)
        {
            if (m_FeatureList == null||nIndex>m_FeatureList.Count-1||nIndex<0)
                return null;

            return m_FeatureList[nIndex];
		}

		/// <summary>
		/// 通过数据表名称获取要素图层
		/// </summary>
		/// <param name="strTableName">数据表名称</param>
        public TableLayer GetFeatureLayerByName(string strTableName)
        {
            if (m_FeatureList == null)
                return null;
            foreach (TableLayer item in m_FeatureList)
            {
                if ((item.Table as IDataset).Name == strTableName)
                    return item;
            }
			return null;
		}

		/// <summary>
		/// 获取图层数
		/// </summary>
		public int GetLayerCount()
        {
            //if (m_pIDataset == null)
            //    return 0;
            //else
            //{
            //    ///获取空间数据集合
            //    IEnumDataset pDataSet = m_pIDataset.Subsets;
            //    IDataset set = pDataSet.Next();
            //    int count = 0;
            //    while (set!=null)
            //    {
            //        ///仅处理当前标准下的数据
            //        Metadata.MetaTable pMetaTable = Metadata.MetaDataFile.GetMetaTalbleByName(set.Name) as Metadata.MetaTable;
            //         if (pMetaTable != null)
            //         {
            //             IFeatureClass pFeatureClass = set as IFeatureClass;
            //             if (pFeatureClass != null && (pFeatureClass.FeatureType == esriFeatureType.esriFTAnnotation
            //                 || pFeatureClass.FeatureType == esriFeatureType.esriFTSimple))
            //                 count++;
            //         }
            //        set = pDataSet.Next();
            //    }
            //    ///获取属性数据集合
            //    IEnumDataset pAttriTalbelDataSet=  m_pIWorkspace.get_Datasets(esriDatasetType.esriDTTable);
            //    IDataset pAttriDataset = pAttriTalbelDataSet.Next();
            //    while (pAttriDataset != null)
            //    {
            //        ///仅处理当前标准下的数据
            //        Metadata.MetaTable pMetaTable = Metadata.MetaDataFile.GetMetaTalbleByName(pAttriDataset.Name) as Metadata.MetaTable;
            //        if (pMetaTable != null)
            //        {
            //            count++;
            //        }
            //        pAttriDataset = pAttriTalbelDataSet.Next();
            //    }
            //    return count;
            //}
            try
            {
                return m_FeatureList.Count;
            }
            catch(Exception ex)
            {
                Logger.WriteErrorLog(ex);
                return 0;
            }
		}

		/// <summary>
		/// 获取空间参考
		/// </summary>
		public Projection GetProjection()
        {
            if (m_Projection.projection == null)
                InitialProjection();
			return m_Projection;
		}

        /// <summary>
        /// 获取要素集中的最大标识码
        /// </summary>
        /// <returns></returns>
        public int GetMaxEntityID()
        {
            try
            {
                int nMaxEntityID = -1;///记录最大标识码
                IEnumDataset pEnumDataset = m_pIDataset.Subsets;
                IDataset pSet = pEnumDataset.Next();
                int nEntityID = -1;
                ///遍历数据集获取各个表中的标识码
                while (pSet != null)
                {
                    ITable pTable = pSet as ITable;

                    ///从配置表中获取标识码字段
                    string sEntityFiled = "";
                    Metadata.MetaTable pMetaTable = Metadata.MetaDataFile.GetMetaTalbleByName(pSet.Name) as Metadata.MetaTable;
                    if (pMetaTable != null)
                    {   
                        sEntityFiled = pMetaTable.EntityIDFiledName;

                        ////仅读取当前标准下的数据
                        ICursor pCursor = pTable.Search(null, true);
                        IRow pRow = pCursor.NextRow();
                        while (pRow != null)
                        {
                            ///获取表中的最大标识码
                            int nIndex = pRow.Fields.FindField(sEntityFiled);
                            if (nIndex != -1)
                            {
                                //if (!VCTFile.ConvertToInt32(pRow.get_Value(nIndex).ToString(), out nEntityID))
                                {

                                    nEntityID = pRow.get_Value(nIndex) == null || pRow.get_Value(nIndex).ToString() == "" ? -1 : Convert.ToInt32(pRow.get_Value(nIndex));
                                }
                                if (nEntityID > nMaxEntityID)
                                    nMaxEntityID = nEntityID;
                            }
                            pRow = pCursor.NextRow();
                        }
                    }
                    pSet = pEnumDataset.Next();
                }
                return nMaxEntityID;
            }
            catch(Exception ex)
            {
                Logger.WriteErrorLog(ex);
                return -1;
            }
        }


        /// <summary>
        /// vct转mdb的时候创建esri数据集
        /// </summary>
        /// <param name="pWorkspace"></param>
        /// <param name="sDatasetName"></param>
        /// <param name="pHeadnode"></param>
        /// <returns></returns>
        public bool CreateESRIDataset(string strDatasetName, HeadNode pHeadnode)
        {
            try
            {
                ISpatialReference pISpatialReference = CreateProjection(pHeadnode);
                if (pISpatialReference != null)
                {
                    IFeatureWorkspace pIFeatureWorkspace = this.m_pIWorkspace as IFeatureWorkspace;
                    this.m_pIDataset = pIFeatureWorkspace.CreateFeatureDataset(strDatasetName, pISpatialReference);
                    return true;
                }

            }
            catch (Exception ex)
            {
                Logger.WriteErrorLog(ex);
            }
            return false;
        }

        /// <summary>
        /// 创建空间参考
        /// </summary>
        /// <param name="headNode">VCT头节点</param>
        private ISpatialReference CreateProjection(HeadNode headNode)
        {
            try
            {
                string sPrjInfo = "";
                //根据投影参数中的长半轴值，来判断是什么坐标系统（北京54，西安80，WGS－84，其他地方坐标系）
                //北京54
                double dMajorAxis = headNode.MajorMax.Y;

                //读取参考椭球的名称 （名称，长半轴，扁率的倒数）
                string sProjection = headNode.Spheroid.Split(',')[0];
                dMajorAxis = Math.Abs(dMajorAxis - 6378245);
                //if (fabs( m_dSemiMajorAxis - 6378245) < 0.0001)
                if (dMajorAxis < 0.0001)
                {
                    sPrjInfo = string.Format("PROJCS[\"{0}\",GEOGCS[\"GCS_Beijing_1954\",DATUM[\"D_Beijing_1954\""
                        + ",SPHEROID[\"{1}\",6378140.0,298.257]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],"
                    + "PROJECTION[\"Gauss_Kruger\"],PARAMETER[\"False_Easting\",{2}],PARAMETER[\"False_Northing\",0.0],"
                    + "PARAMETER[\"Central_Meridian\",{3}],PARAMETER[\"Scale_Factor\",1.0],PARAMETER[\"Latitude_Of_Origin\",0.0],"
                    + "UNIT[\"Meter\",1.0]]", sProjection, "Gauss-Krueger", headNode.Excursion, headNode.Parametetor.OriginLongtitude);

                }
                //西安80
                else
                {
                    // sPrjInfo = string.Format("PROJCS["%s\",GEOGCS[\"GCS_Xian_1980\",DATUM[\"D_Xian_1980\",SPHEROID[\"%s\",6378140.0,298.257]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Gauss_Kruger\"],PARAMETER[\"False_Easting\",%s],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",%f],PARAMETER[\"Scale_Factor\",1.0],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]", m_strProjection, m_strSpheroid, sPianYi, m_lMeridian);
                    sPrjInfo = string.Format("PROJCS[\"{0}\",GEOGCS[\"GCS_Xian_1980\",DATUM[\"D_Xian_1980\","
                    + "SPHEROID[\"{1}\",6378140.0,298.257]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],"
                    + "PROJECTION[\"Gauss_Kruger\"],PARAMETER[\"False_Easting\",{2}],PARAMETER[\"False_Northing\",0.0],"
                    + "PARAMETER[\"Central_Meridian\",{3}],PARAMETER[\"Scale_Factor\",1.0],PARAMETER[\"Latitude_Of_Origin\",0.0],"
                    + "UNIT[\"Meter\",1.0]]", sProjection, "Gauss-Krueger", headNode.Parametetor.EastOffset, headNode.Parametetor.OriginLongtitude);
                }
                //将坐标信息写入到Prj文件
                string sPrjFilename = Application.StartupPath + "tempPrj.prj";
                FileStream fs = File.Create(sPrjFilename);
                StreamWriter sw = new StreamWriter(fs);
                sw.Write(sPrjInfo);
                sw.Close();
                fs.Close();

                //根据Prj文件生成空间参考
                ISpatialReferenceFactory ipSpatialFactory = new SpatialReferenceEnvironmentClass();
                ISpatialReference pSpatialReference = ipSpatialFactory.CreateESRISpatialReferenceFromPRJFile(sPrjFilename);
                pSpatialReference.SetDomain(headNode.MajorMin.X,headNode.MajorMax.X,headNode.MajorMin.Y,headNode.MajorMax.Y);//
                //设置精度,防止cut失败
                //设置六位小数精度。以保证导出时也是六位
                ISpatialReferenceTolerance ipSrTolerance = pSpatialReference as ISpatialReferenceTolerance;

                ipSrTolerance.XYTolerance = 0.000001;
                ipSrTolerance.MTolerance = 0.001;
                ipSrTolerance.ZTolerance = 0.001;

                ISpatialReferenceResolution ipSrResolution = pSpatialReference as ISpatialReferenceResolution;
                ipSrResolution.MResolution = 0.001;
                ipSrResolution.set_XYResolution(true, 0.000001);
                ipSrResolution.set_ZResolution(true, 0.001);

                //删除生成的Prj文件
                File.Delete(sPrjFilename);


                //ISpatialReference pSpatialReference;
                //ISpatialReferenceFactory pSpatialreferenceFactory;
                //pSpatialreferenceFactory = new SpatialReferenceEnvironmentClass();
                //IGeographicCoordinateSystem pGeographicCoordinateSystem;
                //pGeographicCoordinateSystem = pSpatialreferenceFactory.CreateGeographicCoordinateSystem((int)esriSRGeoCS3Type.esriSRGeoCS_Xian1980);
                //pSpatialReference = pGeographicCoordinateSystem as ISpatialReference;
                //pSpatialReference.SetFalseOriginAndUnits(-180, -90, 1000000);//

                return pSpatialReference;
            }
            catch (Exception ex)
            {
                Logger.WriteLog("创建空间参考失败，系统默认创建空的空间参考！\r\n");
                Logger.WriteErrorLog(ex);
                ISpatialReference pSpatialReference = new UnknownCoordinateSystemClass();
                pSpatialReference.SetDomain(headNode.MajorMin.X, headNode.MajorMax.X, headNode.MajorMin.Y, headNode.MajorMax.Y);//
                return pSpatialReference;
            }
        }

	}//end Dataset

}//end namespace ESRIData