///////////////////////////////////////////////////////////
//  LineEntity.cs
//  Implementation of the Class LineEntity
//  Generated by Enterprise Architect
//  Created on:      08-四月-2011 13:45:31
//  Original author: Administrator
///////////////////////////////////////////////////////////




using DIST.DGP.DataExchange.VCT.FileData;
using DIST.DGP.DataExchange.VCT.ESRIData;
using ESRI.ArcGIS.Geometry;
using System;
using ESRI.ArcGIS.Geodatabase;
using DIST.DGP.DataExchange.VCT.Metadata;
namespace DIST.DGP.DataExchange.VCT.ESRIData {
	/// <summary>
	/// 线实体类
	/// </summary>
	public class LineEntity : FeatureEntity {

		public LineEntity(){

		}

        public LineEntity(EntityNode node)
        {
            this.Representation = node.Representation;
            this.FeatureCode = node.FeatureCode;
            this.EntityID = node.EntityID;
            //CreateFeature(node);
        }

		~LineEntity(){

		}

		public override void Dispose()
        {
            base.Dispose();
		}

		/// <summary>
		/// 创建线实体
		/// </summary>
        /// <param name="pITable">数据表对象</param>
        /// <param name="entinyNode">VCT空间实体节点</param>
        public override void CreateFeature(ITable pITable, EntityNode entinyNode)
        {
            try
            {
                IFeatureClass pFeatureCls = pITable as IFeatureClass;
                this.Feature =  pFeatureCls.CreateFeature();
                LineNode pLineNode = entinyNode as LineNode;

                if (pLineNode != null)
                {
                    ///标识码赋值
                    int dBSMIndex = -1;
                    dBSMIndex = this.Feature.Fields.FindField(m_strEntityIDFiled);
                    if (dBSMIndex != -1)
                        this.Feature.set_Value(dBSMIndex, pLineNode.EntityID);

                    ///要素代码赋值
                    int dSYDMIndex = -1;
                    dSYDMIndex = this.Feature.Fields.FindField(m_strYSDMField);
                    if (dSYDMIndex != -1)
                        this.Feature.set_Value(dSYDMIndex, pLineNode.FeatureCode);

                    ///创建空间数据
                    int dLineNodeCount = pLineNode.SegmentNodes.Count;
                    IPointCollection pointCollection = new PolylineClass();
                    for (int i = 0; i < dLineNodeCount; i++)
                    {
                        //11表示折线类型
                        if (Metadata.MetaDataFile.GraphConfig.GetGraphMark("LINETYPE", pLineNode.SegmentNodes[i].SegmentType.ToString()) == "BrokenLine")
                        {
                            BrokenLineNode pBLine = pLineNode.SegmentNodes[i] as BrokenLineNode;
                            foreach (PointInfoNode pPointInfoNode in pBLine.PointInfoNodes)
                            {
                                IPoint pPoint = new PointClass();
                                pPoint.PutCoords(pPointInfoNode.X, pPointInfoNode.Y);
                                object objType = Type.Missing;
                                pointCollection.AddPoint(pPoint, ref objType, ref objType);
                            }
                        }
                        else
                        {
                            //其他类型待后续扩展
                        }
                    }
                    (this.Feature as IFeature).Shape = pointCollection as IGeometry;

                    //feature.set_Value();
                    this.Feature.Store();
                }
            }
            catch(Exception ex)
            {
                Logger.WriteErrorLog(ex);
            }
		}



		/// <summary>
		/// 获取VCT线实体节点
		/// </summary>
		public override EntityNode GetEntityNode()
        {
            try
            {
                LineNode pLineNode = new LineNode();
                pLineNode.SegmentNodes = new SegmentNodes();

                IFeature pFeature = this.Feature as IFeature;

                //特征类型统一设置为1
                pLineNode.LineType = 1;

                ///标识码赋值
                int dBSMIndex = -1;
                dBSMIndex = this.Feature.Fields.FindField(m_strEntityIDFiled);
                if (dBSMIndex != -1)
                    pLineNode.EntityID = Convert.ToInt32(this.Feature.get_Value(dBSMIndex));
                
                ///要素代码赋值
                //int dSYDMIndex = -1;
                //dSYDMIndex = this.Feature.Fields.FindField(m_strYSDMField);
                //if (dSYDMIndex != -1)
                //    pLineNode.FeatureCode = this.Feature.get_Value(dSYDMIndex).ToString();
                //string sAttriTableName = (pFeature.Class as IDataset).Name;
                //pLineNode.FeatureCode = MetaDataFile.GetFeatureCodeByName(sAttriTableName);
                pLineNode.FeatureCode = this.FeatureCode;

                ///图形表现编码
                //pLineNode.Representation = pFeature.Class.AliasName;
                ///add by 曾平 2011-9-7 添加裁切
                IGeometry pFeatureGeometry = null;
                if (m_bCut)
                {
                    pFeatureGeometry = GetSubGeometry();
                    if (pFeatureGeometry == null)
                    {
                        pFeatureGeometry = pFeature.Shape;
                    }
                }
                else
                {
                    pFeatureGeometry = pFeature.Shape;
                }

                IPolyline pPolygon =pFeatureGeometry as IPolyline;
                ///构造节点数据
                IPointCollection pPointCollection = pPolygon as IPointCollection;
                BrokenLineNode pBLineNode = new BrokenLineNode();
                pBLineNode.PointInfoNodes = new PointInfoNodes();
                for (int i = 0; i < pPointCollection.PointCount; i++)
                {
                    
                    IPoint pPoint = pPointCollection.get_Point(i);
                    PointInfoNode pInfoNode1 = new PointInfoNode(pPoint.X, pPoint.Y);
                    pBLineNode.PointInfoNodes.Add(pInfoNode1);
                   
                } 

                pLineNode.SegmentNodes.Add(pBLineNode);
                return pLineNode;
            }
            catch (Exception ex)
            {
                Logger.WriteErrorLog(ex);
                return null;
            }
		}
       
 

	}//end LineEntity

}//end namespace ESRIData