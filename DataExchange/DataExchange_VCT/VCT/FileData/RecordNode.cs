///////////////////////////////////////////////////////////
//  RecordNode.cs
//  Implementation of the Class RecordNode
//  Generated by Enterprise Architect
//  Created on:      08-四月-2011 13:45:32
//  Original author: Administrator
///////////////////////////////////////////////////////////




using System.Collections.Generic;
using System;
namespace DIST.DGP.DataExchange.VCT.FileData {
	/// <summary>
	/// VCT属性记录节点类
	/// </summary>
    public class RecordNode : IComparable
    {

        /// <summary>
		/// 对象标识码
		/// </summary>
        public int EntityID
        {
            get
            {
                return m_nEntityID;
            }
            set
            {
                m_nEntityID = value;
            }
        }
        private int m_nEntityID;


        /// <summary>
		/// 字段属性值集合
		/// </summary>
        public List<string > FieldValues
        {
            get
            {
                return m_arrFieldValue;
            }
            set
            {
                m_arrFieldValue = value;
            }
        }
        private List<string> m_arrFieldValue = new List<string>();


		public RecordNode(){

		}

        public RecordNode(string strLine)
        {
            string[] arrFieldValue = strLine.Split(HeadNode.Separator);
            int nEntityID = -1;
            for (int i = 0; i < arrFieldValue.Length; i++)
            {
                if (i == 0)
                {
                    if (VCTFile.ConvertToInt32(arrFieldValue[0],out nEntityID))
                        this.m_nEntityID = nEntityID;
                }
                this.m_arrFieldValue.Add(arrFieldValue[i]);
            }
        }

        /// <summary>
        /// add by 曾平，构造属性记录
        /// </summary>
        /// <param name="strLine"></param>
        /// <returns></returns>
        public bool StructRecordNode(string strLine)
        {
            try
            {
                string[] arrFieldValue = strLine.Split(HeadNode.Separator);
                int nEntityID = -1;
                for (int i = 0; i < arrFieldValue.Length; i++)
                {
                    if (i == 0)
                    {
                        if (VCTFile.ConvertToInt32(arrFieldValue[0], out nEntityID))
                            this.m_nEntityID = nEntityID;
                    }
                    this.m_arrFieldValue.Add(arrFieldValue[i]);
                }
                return true;
            }
            catch
            {
                return false;
            }
        }

        ~RecordNode()
        {

		}

		public virtual void Dispose(){

		}

        /// <summary>
        /// 操作符“>”
        /// </summary>
        /// <param name="xRecordNode">VCT属性记录节点</param>
        /// <param name="yRecordNode">VCT属性记录节点</param>
        public static bool operator >(RecordNode xRecordNode, RecordNode yRecordNode)
        {
            if (object.Equals(xRecordNode, null))
            {
                return false;
            }
            else
            {
                if (object.Equals(yRecordNode, null))
                    return true;
            }
            return xRecordNode.EntityID > yRecordNode.EntityID ? true : false;
        }

        /// <summary>
        /// 操作符“==”
        /// </summary>
        /// <param name="xRecordNode">VCT属性记录节点</param>
        /// <param name="yRecordNode">VCT属性记录节点</param>
        public static bool operator ==(RecordNode xRecordNode, RecordNode yRecordNode)
        {
            if (object.Equals(xRecordNode, null))
            {
                if (object.Equals(yRecordNode, null))
                    return true;
                else
                    return false;
            }
            else
            {
                if (object.Equals(yRecordNode, null))
                    return false;
            }
            return xRecordNode.EntityID == yRecordNode.EntityID ? true : false;
        }

        /// <summary>
        /// 操作符“!=”
        /// </summary>
        /// <param name="xRecordNode">VCT属性记录节点</param>
        /// <param name="yRecordNode">VCT属性记录节点</param>
        public static bool operator !=(RecordNode xRecordNode, RecordNode yRecordNode)
        {
            if (object.Equals(xRecordNode, null))
            {
                if (object.Equals(yRecordNode, null))
                    return false;
                else
                    return true;
            }
            else
            {
                if (object.Equals(yRecordNode, null))
                    return true;

            }
            return xRecordNode.EntityID != yRecordNode.EntityID ? true : false;
        }
        
        /// <summary>
        /// 操作符“<”
        /// </summary>
        /// <param name="xRecordNode">VCT属性记录节点</param>
        /// <param name="yRecordNode">VCT属性记录节点</param>
        public static bool operator <(RecordNode xRecordNode, RecordNode yRecordNode)
        {
            if (object.Equals(xRecordNode, null))
            {
                return true;
            }
            else
            {
                if (object.Equals(yRecordNode, null))
                    return false;
            } 
            return xRecordNode.EntityID < yRecordNode.EntityID ? true : false;
        }

        /// <summary>
        /// 输出VCT节点
        /// </summary>
        public override string ToString()
        {
            string strNode= m_nEntityID.ToString();
            if (m_nEntityID != null && m_nEntityID > 0)
            {
                for (int i = 1; i < m_arrFieldValue.Count; i++)
                {
                    strNode += HeadNode.Separator.ToString() + m_arrFieldValue[i];
                }
            }
            else
            {
                strNode = "";
                for (int i = 0; i < m_arrFieldValue.Count; i++)
                {
                    if(0==i)
                        strNode+=m_arrFieldValue[i];
                    else
                    strNode += HeadNode.Separator.ToString() + m_arrFieldValue[i];
                }
            }
            return strNode;
        }


        public int CompareTo(object obj)
        {
            RecordNode objRecordNode = obj as RecordNode;
            if (this == objRecordNode)
                return 0;
            else if (this > objRecordNode)
                return 1;

            return -1;
        }

	}//end RecordNode

    ///// <summary>
    ///// VCT属性记录节点集合类
    ///// </summary>
    //public class RecordNodes : List<RecordNode>
    //{
    //    void RecordNodes()
    //    {
    //        this.Sort();
    //    }
    //}

}//end namespace FileData