///////////////////////////////////////////////////////////
//  HeadNode.cs
//  Implementation of the Class HeadNode
//  Generated by Enterprise Architect
//  Created on:      08-四月-2011 13:45:31
//  Original author: Administrator
///////////////////////////////////////////////////////////




using System;
namespace DIST.DGP.DataExchange.VCT.FileData {
	/// <summary>
	/// VCT头节点类
	/// </summary>
	public class HeadNode
    {
        /// <summary>
        /// 数据源标识
        /// </summary>
        public string Datamark
        {
            get
            {
                return m_strDatamark;
            }
            set
            {
                m_strDatamark = value;
            }
        }
		private string m_strDatamark;

        /// <summary>
        /// 版本号
        /// </summary>
        public string Version
        {
            get
            {
                return m_strVersion;
            }
            set
            {
                m_strVersion = value;
            }
        }
		private string m_strVersion;

        /// <summary>
        /// 坐标系统类型
        /// </summary>
        public string CoordinateSystemType
        {
            get
            {
                return m_strCoordinateSystemType;
            }
            set
            {
                m_strCoordinateSystemType = value;
            }
        }
		private string m_strCoordinateSystemType;

        /// <summary>
        /// 坐标维数
        /// </summary>
        public int Dim
        {
            get
            {
                return m_nDim;
            }
            set
            {
                m_nDim = value;
            }
        }
        private int m_nDim;

        /// <summary>
        /// X坐标轴方向
        /// </summary>
        public string XaxisDirection
        {
            get
            {
                return m_strXAxisDirection;
            }
            set
            {
                m_strXAxisDirection = value;
            }
        }
		private string m_strXAxisDirection;

        /// <summary>
        /// Y坐标轴方向
        /// </summary>
        public string YAxisDirection
        {
            get
            {
                return m_strYAxisDirection;
            }
            set
            {
                m_strYAxisDirection = value;
            }
        }
        private string m_strYAxisDirection;

        /// <summary>
        /// 平面坐标单位
        /// </summary>
        public string Unit
        {
            get
            {
                return m_strUnit;
            }
            set
            {
                m_strUnit = value;
            }
        }
        private string m_strUnit;

        /// <summary>
        /// 投影类型
        /// </summary>
        public string Projection
        {
            get
            {
                return m_strProjection;
            }
            set
            {
                m_strProjection = value;
            }
        }
        private string m_strProjection;

        /// <summary>
        /// 参考椭球
        /// </summary>
        public string Spheroid
        {
            get
            {
                return m_strSpheroid;
            }
            set
            {
                m_strSpheroid = value;
            }
        }
        private string m_strSpheroid;

        /// <summary>
        /// 首子午线
        /// </summary>
        public string PrimeMeridian
        {
            get
            {
                return m_strPrimeMeridian;
            }
            set
            {
                m_strPrimeMeridian = value;
            }
        }
        private string m_strPrimeMeridian;

        /// <summary>
        /// 投影参数
        /// </summary>
        public ProjectionParameter Parametetor
        {
            get
            {
                return m_strPatameters;
            }
            set
            {
                m_strPatameters = value;
            }
        }


        private ProjectionParameter m_strPatameters=new ProjectionParameter();

        /// <summary>
        /// 高程基准
        /// </summary>
        public string Vertical
        {
            get
            {
                return m_strVertical;
            }
            set
            {
                m_strVertical = value;
            }
        }
        private string m_strVertical;

        /// <summary>
        /// 时间参考系
        /// </summary>
        public string TemporalReferenceSystem
        {
            get
            {
                return m_strTemporalReferenceSystem;
            }
            set
            {
                m_strTemporalReferenceSystem = value;
            }
        }
        private string m_strTemporalReferenceSystem;

        /// <summary>
        /// 最小坐标
        /// </summary>
        public PointInfoNode MajorMin
        {
            get
            {
                return m_MajorMin;
            }
            set
            {
                m_MajorMin = value;
            }
        }
        private PointInfoNode m_MajorMin;

        /// <summary>
        /// 最大坐标
        /// </summary>
        public PointInfoNode MajorMax
        {
            get
            {
                return m_MajorMax;
            }
            set
            {
                m_MajorMax = value;
            }
        }
        private PointInfoNode m_MajorMax;

        /// <summary>
        /// 比例尺
        /// </summary>
        public string Scale
        {
            get
            {
                return m_strScale;
            }
            set
            {
                m_strScale = value;
            }
        }
        private string m_strScale;

        /// <summary>
        /// 坐标偏移量
        /// </summary>
        public string Excursion
        {
            get
            {
                return m_strExcursion;
            }
            set
            {
                m_strExcursion = value;
            }
        }
        private string m_strExcursion;

        /// <summary>
        /// 土地规划批准时间
        /// </summary>
        public string Date
        {
            get
            {
                return m_strDate;
            }
            set
            {
                m_strDate = value;
            }
        }
        private string m_strDate;

        /// <summary>
        /// 属性字段分隔符
        /// </summary>
        public static char Separator
        {
            get
            {
                return m_cSeparator;
            }
            set
            {
                m_cSeparator = value;
            }
        }
        private static char m_cSeparator = ',';

        public HeadNode(){


		}

		~HeadNode(){

		}

		public virtual void Dispose(){

		}

        public bool SetValue(string strVariantName, string strValue)
        {
            strVariantName = Metadata.MetaDataFile.HeadConfig.GetHeadMark(strVariantName).ToLower();
            int nValue = -1;
           strValue= strValue.Trim();
            switch (strVariantName)
            {
                case "datamark":
                    {
                        this.m_strDatamark = strValue;
                        break;
                    }
                case "version":
                    {
                        this.m_strVersion = strValue;
                        break;
                    }
                case "coordinatesystemType":
                    {
                        this.m_strCoordinateSystemType = strValue;
                        break;
                    }
                case "dim":
                    {
                        if (VCTFile.ConvertToInt32(strValue,out nValue))
                            this.m_nDim = nValue;
                        break;
                    }
                case "xaxisdirection":
                    {
                        this.m_strXAxisDirection = strValue;
                        break;
                    }
                case "yaxisdirection":
                    {
                        this.m_strYAxisDirection = strValue;
                        break;
                    }
                case "unit":
                    {
                        this.m_strUnit = strValue;
                        break;
                    }
                case "projection":
                    {
                        this.m_strProjection = strValue;
                        break;
                    }
                case "spheroid":
                    {
                        this.m_strSpheroid = strValue;
                        break;
                    }
                case "primemeridian":
                    {
                        this.m_strPrimeMeridian = strValue;
                        break;
                    }
                case "parameters":
                    {
                        GetParameter( strValue);
                        break;
                    }
                case "vertical":
                    {
                        this.m_strVertical = strValue;
                        break;
                    }
                case "temporalreferencesystem":
                    {
                        this.m_strTemporalReferenceSystem = strValue;
                        break;
                    }
                case "majormin":
                    {
                        this.m_MajorMin = new PointInfoNode(strValue);
                        break;
                    }
                case "majormax":
                    {
                        this.m_MajorMax = new PointInfoNode(strValue);
                        break;
                    }
                case "scale":
                    {
                        m_strScale = strValue;
                        break;
                    }
                case "excursion":
                    {
                        this.m_strExcursion = strValue;
                        break;
                    }
                case "date":
                    {
                        this.m_strDate = strValue;
                        break;
                    }
                case "separator":
                    {
                        HeadNode.m_cSeparator = strValue[0];
                        break;
                    }
            }
            
            return true;
        }

        /// <summary>
        /// 获取投影参数
        /// </summary>
        /// <param name="strValue"></param>
        private void GetParameter(string strValue)
        {
           string [] strPatameters= strValue.Split(',');
            //原点经度>,<原点纬度>,<第一标准纬线>,<第二标准纬线>,<方位角>,<归化比例因子>,<东偏>,<北偏>,<带宽>,<带号>
           if (strPatameters.Length > 0)
               m_strPatameters.OriginLongtitude = strPatameters[0];
           if (strPatameters.Length > 1)
               m_strPatameters.OriginLatitude = strPatameters[1];
           if (strPatameters.Length > 2)
               m_strPatameters.FirstStandard = strPatameters[2];
           if (strPatameters.Length > 3)
               m_strPatameters.SecondStandard = strPatameters[3];
           if (strPatameters.Length > 4)
               m_strPatameters.Angle = strPatameters[4];
           if (strPatameters.Length > 5)
               m_strPatameters.ScaleFactor = strPatameters[5];
           if (strPatameters.Length > 6)
               m_strPatameters.EastOffset = strPatameters[6];
           if (strPatameters.Length > 7)
               m_strPatameters.NorthOffset = strPatameters[7];
           if (strPatameters.Length > 8)
               m_strPatameters.With = strPatameters[8];
           if (strPatameters.Length > 9)
               m_strPatameters.Num = strPatameters[9];
        }

        /// <summary>
        /// 输出VCT节点
        /// </summary>
        public override string ToString()
        {
            string strNode = Metadata.MetaDataFile.HeadConfig.DataMark.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strDatamark;
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.Version.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strVersion;
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.CoordSystemType.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strCoordinateSystemType;
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.CoordinateDim.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_nDim.ToString();
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.XAxisDirection.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strXAxisDirection;
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.YAxisDirection.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strYAxisDirection;
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.CoordinateUnit.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strUnit;
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.Spheroid.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strSpheroid;
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.PrimeMeridian.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strPrimeMeridian;
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.Projection.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strProjection;
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.ProjectionParator.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strPatameters.ToString();
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.Vertical.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strVertical;
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.TemporalReferenceSystem.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strTemporalReferenceSystem;
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.MinCoordinate.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_MajorMin.ToString();
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.MaxCoordinate.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_MajorMax.ToString();
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.Scale.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strScale;
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.Excurtion.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strExcursion;
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.PassTime.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + this.m_strDate;
            strNode += "\r\n" + Metadata.MetaDataFile.HeadConfig.Sparator.Symbol + Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol + HeadNode.m_cSeparator.ToString();

            return strNode;
        }

	}//end HeadNode


    /// <summary>
    /// 投影参数结构体
    /// </summary>
    public class ProjectionParameter
    {
        public ProjectionParameter()
        { }

        private string m_OriginLongtitude;
        /// <summary>
        /// 原点经度
        /// </summary>
        public string OriginLongtitude
        {
            get
            {
                return m_OriginLongtitude;
            }
            set
            {
                m_OriginLongtitude = value;
            }
        }

        private string m_OriginLatitude;
        /// <summary>
        /// 原点纬度
        /// </summary>
        public string OriginLatitude
        {
            get
            {
                return m_OriginLatitude;
            }
            set
            {
                m_OriginLatitude = value;
            }
        }

        private string m_FirstStandard;
        /// <summary>
        /// 第一标准纬线
        /// </summary>
        public string FirstStandard
        {
            get
            {
                return m_FirstStandard;
            }
            set
            {
                m_FirstStandard = value;
            }
        }

        private string m_SecondStandard;
        /// <summary>
        /// 第二标准纬线
        /// </summary>
        public string SecondStandard
        {
            get
            {
                return m_SecondStandard;
            }
            set
            {
                m_SecondStandard = value;
            }
        }

        private string m_Angle;
        /// <summary>
        /// 方位角
        /// </summary>
        public string Angle
        {
            get
            {
                return m_Angle;
            }
            set
            {
                m_Angle = value;
            }
        }

        private string m_ScaleFactor;
        /// <summary>
        /// 归化比例因子
        /// </summary>
        public string ScaleFactor
        {
            get
            {
                return m_ScaleFactor;
            }
            set
            {
                m_ScaleFactor = value;
            }
        }

        private string m_EastOffset;
        /// <summary>
        /// 东偏
        /// </summary>
        public string EastOffset
        {
            get
            {
                return m_EastOffset;
            }
            set
            {
                m_EastOffset = value;
            }
        }

        private string m_NorthOffset;
        /// <summary>
        /// 北偏
        /// </summary>
        public string NorthOffset
        {
            get
            {
                return m_NorthOffset;
            }
            set
            {
                m_NorthOffset = value;
            }
        }

        private string m_With;
        /// <summary>
        /// 带宽
        /// </summary>
        public string With
        {
            get
            {
                return m_With;
            }
            set
            {
                m_With = value;
            }
        }

        private string m_Num;
        /// <summary>
        /// 带号
        /// </summary>
        public string Num
        {
            get
            {
                return m_Num;
            }
            set
            {
                m_Num = value;
            }
        }

        public override string ToString()
        {
            //原点经度>,<原点纬度>,<第一标准纬线>,<第二标准纬线>,<方位角>,<归化比例因子>,<东偏>,<北偏>,<带宽>,<带号>
            string str = m_OriginLongtitude + "," + m_OriginLatitude + "," + m_FirstStandard + "," + m_SecondStandard+",";
            str += m_Angle + "," + m_ScaleFactor + "," + m_EastOffset + "," + m_NorthOffset + "," + m_With + "," + m_Num;
            return str;
        }
    }
}//end namespace FileData