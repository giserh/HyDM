///////////////////////////////////////////////////////////
//  PointInfoNode.cs
//  Implementation of the Class PointInfoNode
//  Generated by Enterprise Architect
//  Created on:      08-四月-2011 13:45:32
//  Original author: Administrator
///////////////////////////////////////////////////////////




using System.Collections.Generic;
using System;
namespace DIST.DGP.DataExchange.VCT.FileData {
	/// <summary>
	/// 点坐标信息节点类
	/// </summary>
    [Serializable]
	public class PointInfoNode {

		/// <summary>
		/// X坐标
		/// </summary>
        public double X;
        //{
        //    get
        //    {
        //        return m_dX;
        //    }
        //    set
        //    {
        //        m_dX = value;
        //    }
        //}
        //private double m_dX;

		/// <summary>
		/// Y坐标
		/// </summary>
        public double Y;
        //{
        //    get
        //    {
        //        return m_dY;
        //    }
        //    set
        //    {
        //        m_dY = value;
        //    }
        //}
        //private double m_dY;


        ///// <summary>
        ///// 构造函数
        ///// </summary>
        //public PointInfoNode()
        //{

        //}

        /// <summary>
        /// 构造函数，根据字符串构造
        /// </summary>
        public PointInfoNode(string strLine)
        {
            string[] arrTemp = strLine.Split(HeadNode.Separator);
            if (arrTemp.Length != 2)
                return;
            double dValue=-1;
            if (VCTFile.ConvertToDouble(arrTemp[0],out dValue))
                this.X = dValue;
            if (VCTFile.ConvertToDouble(arrTemp[1], out dValue))
                this.Y = dValue;
        }

        /// <summary>
        /// 构造函数，根据坐标点对
        /// </summary>
        public PointInfoNode(double dX, double dY)
        {
            this.X = dX;
            this.Y = dY;
        }

        //~PointInfoNode(){

        //}

        //public virtual void Dispose(){

        //}

        /// <summary>
        /// 操作符“>”
        /// </summary>
        /// <param name="xPointInfoNode">点坐标信息节点</param>
        /// <param name="yPointInfoNode">点坐标信息节点</param>
        public static bool operator >(PointInfoNode xPointInfoNode, PointInfoNode yPointInfoNode)
        {
            if (object.Equals(xPointInfoNode, null))
            {
                return false;
            }
            else
            {
                if (object.Equals(yPointInfoNode, null))
                    return true;
            }
            
            double dResult = xPointInfoNode.X - yPointInfoNode.X;
            if (System.Math.Abs(dResult) < 0.000001)
            {
                return xPointInfoNode.Y > yPointInfoNode.Y ? true : false;
            }
            return dResult > 0.0 ? true : false;
        }

        /// <summary>
        /// 操作符“==”
        /// </summary>
        /// <param name="xPointInfoNode">点坐标信息节点</param>
        /// <param name="yPointInfoNode">点坐标信息节点</param>
        public static bool operator ==(PointInfoNode xPointInfoNode, PointInfoNode yPointInfoNode)
        {
            if (object.Equals(xPointInfoNode, null))
            {
                if (object.Equals(yPointInfoNode, null))
                    return true;
                else
                    return false;
            }
            else
            {
                if (object.Equals(yPointInfoNode, null))
                    return false;
            }

            double dResult = xPointInfoNode.X - yPointInfoNode.X;
            if (System.Math.Abs(dResult) < 0.000001)
            {
                dResult = xPointInfoNode.Y - yPointInfoNode.Y;
                if (System.Math.Abs(dResult) < 0.000001)
                    return true;
            }
            return false;
        }

        /// <summary>
        /// 操作符“!=”
        /// </summary>
        /// <param name="xPointInfoNode">点坐标信息节点</param>
        /// <param name="yPointInfoNode">点坐标信息节点</param>
        public static bool operator !=(PointInfoNode xPointInfoNode, PointInfoNode yPointInfoNode)
        {
            if (object.Equals(xPointInfoNode, null))
            {
                if (object.Equals(yPointInfoNode, null))
                    return false;
                else
                    return true;
            }
            else
            {
                if (object.Equals(yPointInfoNode, null))
                    return true;

            }
            double dResult = xPointInfoNode.X - yPointInfoNode.X;
            if (System.Math.Abs(dResult) < 0.000001)
            {
                dResult = xPointInfoNode.Y - yPointInfoNode.Y;
                if (System.Math.Abs(dResult) < 0.000001)
                    return false;
            }
            return true;
        }

        /// <summary>
        /// 操作符“<”
        /// </summary>
        /// <param name="xPointInfoNode">点坐标信息节点</param>
        /// <param name="yPointInfoNode">点坐标信息节点</param>
        public static bool operator <(PointInfoNode xPointInfoNode, PointInfoNode yPointInfoNode)
        {
            if (object.Equals(xPointInfoNode, null))
            {
                return true;
            }
            else
            {
                if (object.Equals(yPointInfoNode, null))
                    return false;
            }

            double dResult = xPointInfoNode.X - yPointInfoNode.X;
            if (System.Math.Abs(dResult) < 0.000001)
            {
                return xPointInfoNode.Y < yPointInfoNode.Y ? true : false;
            }
            return dResult < 0.0 ? true : false;
        }

        /// <summary>
        /// 重写方法，Equals
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType()) return false;

            return this == obj as PointInfoNode ? true : false;
        }

        /// <summary>
        /// 重写方法，GetHashCode
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// 输出VCT节点
        /// </summary>
        public override string ToString()
        {
            return this.X.ToString() + HeadNode.Separator.ToString() + this.Y.ToString();
        }
	}//end PointInfoNode

    /// <summary>
	/// 点坐标信息节点集合类
	/// </summary>
    [Serializable]
    public class PointInfoNodes : List<PointInfoNode>
    {
        /// <summary>
        /// 操作符“>”
        /// </summary>
        /// <param name="xPointInfoNodes">点坐标信息节点集合</param>
        /// <param name="yPointInfoNodes">点坐标信息节点集合</param>
        public static bool operator >(PointInfoNodes xPointInfoNodes, PointInfoNodes yPointInfoNodes)
        {
            if (object.Equals(xPointInfoNodes, null))
            {
                return false;
            }
            else
            {
                if (object.Equals(yPointInfoNodes, null))
                    return true;
            }

            if (xPointInfoNodes.Count == yPointInfoNodes.Count)
            {
                for (int i = 0; i < xPointInfoNodes.Count; i++)
                {
                    if (xPointInfoNodes[i] > yPointInfoNodes[i])
                        return true;
                    else if (xPointInfoNodes[i] < yPointInfoNodes[i])
                        return false;
                }
                return true;
            }
            else if (xPointInfoNodes.Count > yPointInfoNodes.Count)
                return true;
            return false;
        }

        /// <summary>
        /// 操作符“==”
        /// </summary>
        /// <param name="xPointInfoNodes">点坐标信息节点集合</param>
        /// <param name="yPointInfoNodes">点坐标信息节点集合</param>
        public static bool operator ==(PointInfoNodes xPointInfoNodes, PointInfoNodes yPointInfoNodes)
        {
            if (object.Equals(xPointInfoNodes, null))
            {
                if (object.Equals(yPointInfoNodes, null))
                    return true;
                else
                    return false;
            }
            else
            {
                if (object.Equals(yPointInfoNodes, null))
                    return false;
            }

            if (xPointInfoNodes.Count == yPointInfoNodes.Count)
            {
                for (int i = 0; i < xPointInfoNodes.Count; i++)
                {
                    if (xPointInfoNodes[i] != yPointInfoNodes[i])
                        return false;
                }
                return true;
            }
            return false;
        }

        /// <summary>
        /// 操作符“!=”
        /// </summary>
        /// <param name="xPointInfoNodes">点坐标信息节点集合</param>
        /// <param name="yPointInfoNodes">点坐标信息节点集合</param>
        public static bool operator !=(PointInfoNodes xPointInfoNodes, PointInfoNodes yPointInfoNodes)
        {
            if (object.Equals(xPointInfoNodes, null))
            {
                if (object.Equals(yPointInfoNodes, null))
                    return false;
                else
                    return true;
            }
            else
            {
                if (object.Equals(yPointInfoNodes, null))
                    return true;

            }

            if (xPointInfoNodes.Count == yPointInfoNodes.Count)
            {
                for (int i = 0; i < xPointInfoNodes.Count; i++)
                {
                    if (xPointInfoNodes[i] != yPointInfoNodes[i])
                        return true;
                }
                return false;
             }
            return true;
        }

        /// <summary>
        /// 操作符“<”
        /// </summary>
        /// <param name="xPointInfoNodes">点坐标信息节点集合</param>
        /// <param name="yPointInfoNodes">点坐标信息节点集合</param>
        public static bool operator <(PointInfoNodes xPointInfoNodes, PointInfoNodes yPointInfoNodes)
        {
            if (object.Equals(xPointInfoNodes, null))
            {
                return true;
            }
            else
            {
                if (object.Equals(yPointInfoNodes, null))
                    return false;
            }

            if (xPointInfoNodes.Count == yPointInfoNodes.Count)
            {
                for (int i = 0; i < xPointInfoNodes.Count; i++)
                {
                    if (xPointInfoNodes[i] < yPointInfoNodes[i])
                        return true;
                    else if (xPointInfoNodes[i] > yPointInfoNodes[i])
                        return false;
                }
                return true;
            }
            else if (xPointInfoNodes.Count < yPointInfoNodes.Count)
                return true;
            return false;
        }

        /// <summary>
        /// 重写方法，Equals
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType()) return false;

            return this == obj as PointInfoNodes ? true : false;
        }

        /// <summary>
        /// 重写方法，GetHashCode
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

}//end namespace FileData