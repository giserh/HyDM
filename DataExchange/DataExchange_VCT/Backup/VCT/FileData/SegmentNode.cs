///////////////////////////////////////////////////////////
//  SegmentNode.cs
//  Implementation of the Class SegmentNode
//  Generated by Enterprise Architect
//  Created on:      08-四月-2011 13:45:33
//  Original author: Administrator
///////////////////////////////////////////////////////////




using System.Collections.Generic;
using System;
using System.IO;
namespace DIST.DGP.DataExchange.VCT.FileData {
	/// <summary>
	/// VCT线段节点类
	/// </summary>
    [Serializable]
	public class SegmentNode {

        /// <summary>
        /// 线段类型
        /// </summary>
        public int SegmentType;
        //{
        //    get
        //    {
        //        return m_nSegmentType;
        //    }
        // }
        //private int m_nSegmentType;

        /// <summary>
        /// 构造函数
        /// </summary>
        public SegmentNode(int nSegmentType)
        {
            this.SegmentType = nSegmentType;
		}

        //~SegmentNode(){

        //}

        ///// <summary>
        ///// VCT文件写入对象  add by 曾平 解决大数据量写入内存溢出的问题
        ///// </summary>
        //protected StreamWriter m_streamWriter;
        ///// <summary>
        ///// VCT文件写入对象
        ///// </summary>
        //public StreamWriter StreamWriter
        //{
        //    set
        //    {
        //        m_streamWriter = value;
        //    }
        //}

        //public virtual void Dispose(){

        //}

        /// <summary>
        /// 操作符“>”
        /// </summary>
        /// <param name="xSegmentNode">线段节点</param>
        /// <param name="ySegmentNode">线段节点</param>
        public static bool operator >(SegmentNode xSegmentNode, SegmentNode ySegmentNode)
        {
            if (object.Equals(xSegmentNode, null))
            {
                return false;
            }
            else
            {
                if (object.Equals(ySegmentNode, null))
                    return true;
            }

            if (xSegmentNode.SegmentType == ySegmentNode.SegmentType)
            {
                switch (xSegmentNode.SegmentType)
                {
                    case 11:
                        {
                            BrokenLineNode xBrokenLineNode = xSegmentNode as BrokenLineNode;
                            BrokenLineNode yBrokenLineNode = ySegmentNode as BrokenLineNode;
                            return xBrokenLineNode > yBrokenLineNode ? true : false;
                        }
                    case 12:
                        break;
                    case 13:
                        break;
                    case 14:
                        break;
                    case 15:
                        break;
                    case 16:
                        break;
                    case 17:
                        break;
                }
            }
            return false;
        }

        /// <summary>
        /// 操作符“==”
        /// </summary>
        /// <param name="xSegmentNode">线段节点</param>
        /// <param name="ySegmentNode">线段节点</param>
        public static bool operator ==(SegmentNode xSegmentNode, SegmentNode ySegmentNode)
        {
            if (object.Equals(xSegmentNode, null))
            {
                if (object.Equals(ySegmentNode, null))
                    return true;
                else
                    return false;
            }
            else
            {
                if (object.Equals(ySegmentNode, null))
                    return false;
            }

            if (xSegmentNode.SegmentType == ySegmentNode.SegmentType)
            {
                switch (xSegmentNode.SegmentType)
                {
                    case 11:
                        {
                            BrokenLineNode xBrokenLineNode = xSegmentNode as BrokenLineNode;
                            BrokenLineNode yBrokenLineNode = ySegmentNode as BrokenLineNode;
                            return xBrokenLineNode == yBrokenLineNode ? true : false;
                        }
                    case 12:
                        break;
                    case 13:
                        break;
                    case 14:
                        break;
                    case 15:
                        break;
                    case 16:
                        break;
                    case 17:
                        break;
                }
            }
            return false;
        }

        /// <summary>
        /// 操作符“!=”
        /// </summary>
        /// <param name="xSegmentNode">线段节点</param>
        /// <param name="ySegmentNode">线段节点</param>
        public static bool operator !=(SegmentNode xSegmentNode, SegmentNode ySegmentNode)
        {
            if (object.Equals(xSegmentNode, null))
            {
                if (object.Equals(ySegmentNode, null))
                    return false;
                else
                    return true;
            }
            else
            {
                if (object.Equals(ySegmentNode, null))
                    return true;

            }

            if (xSegmentNode.SegmentType == ySegmentNode.SegmentType)
            {
                switch (xSegmentNode.SegmentType)
                {
                    case 11:
                        {
                            BrokenLineNode xBrokenLineNode = xSegmentNode as BrokenLineNode;
                            BrokenLineNode yBrokenLineNode = ySegmentNode as BrokenLineNode;
                            return xBrokenLineNode != yBrokenLineNode ? true : false;
                        }
                    case 12:
                        break;
                    case 13:
                        break;
                    case 14:
                        break;
                    case 15:
                        break;
                    case 16:
                        break;
                    case 17:
                        break;
                }
            }
            return false;
        }

        /// <summary>
        /// 操作符“<”
        /// </summary>
        /// <param name="xSegmentNode">线段节点</param>
        /// <param name="ySegmentNode">线段节点</param>
        public static bool operator <(SegmentNode xSegmentNode, SegmentNode ySegmentNode)
        {
            if (object.Equals(xSegmentNode, null))
            {
                return true;
            }
            else
            {
                if (object.Equals(ySegmentNode, null))
                    return false;
            }

            if (xSegmentNode.SegmentType == ySegmentNode.SegmentType)
            {
                switch (xSegmentNode.SegmentType)
                {
                    case 11:
                        {
                            BrokenLineNode xBrokenLineNode = xSegmentNode as BrokenLineNode;
                            BrokenLineNode yBrokenLineNode = ySegmentNode as BrokenLineNode;
                            return xBrokenLineNode < yBrokenLineNode ? true : false;
                        }
                    case 12:
                        break;
                    case 13:
                        break;
                    case 14:
                        break;
                    case 15:
                        break;
                    case 16:
                        break;
                    case 17:
                        break;
                }
            }
            return false;
        }

        /// <summary>
        /// 重写方法，Equals
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType()) return false;

            return this == obj as SegmentNode ? true : false;
        }
        
        /// <summary>
        /// 反向
        /// </summary>
        public virtual void Reverse()
        {

        }

        /// <summary>
        /// 重写方法，GetHashCode
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// 输出VCT节点
        /// </summary>
        public override string ToString()
        {
            return this.SegmentType.ToString();
        }

	}//end SegmentNode
    
    /// <summary>
    /// 线段节点集合
    /// </summary>
    [Serializable]
    public class SegmentNodes : List<SegmentNode>
    {
        /// <summary>
        /// 操作符“>”
        /// </summary>
        /// <param name="xSegmentNodes">线段节点集合</param>
        /// <param name="ySegmentNodes">线段节点集合</param>
        public new void AddRange(IEnumerable<SegmentNode> collection)
        {
            if (this.Count > 0)
            {
                BrokenLineNode segmentNode1 = this[this.Count - 1] as BrokenLineNode;
                if (segmentNode1 != null)
                {
                    IEnumerator<SegmentNode> pIEnumerator = collection.GetEnumerator();
                    pIEnumerator.Reset();
                    bool bFirst = true;
                    while (pIEnumerator.MoveNext())
                    {
                        if (bFirst == true)
                        {
                            BrokenLineNode segmentNode2 = pIEnumerator.Current as BrokenLineNode;
                            if (segmentNode2 != null)
                            {
                                //if (segmentNode1.PointInfoNodes[segmentNode1.PointInfoNodes.Count - 1] == segmentNode2.PointInfoNodes[0])
                                //{
                                    for (int i = 1; i < segmentNode2.PointInfoNodes.Count; i++)
                                    {
                                        segmentNode1.PointInfoNodes.Add(segmentNode2.PointInfoNodes[i]);
                                    }
                                //}
                                //else
                                //{
                                //    for (int i = segmentNode2.PointInfoNodes.Count - 2; i >= 0; i--)
                                //    {
                                //        segmentNode1.PointInfoNodes.Add(segmentNode2.PointInfoNodes[i]);
                                //    }

                                //}
                            }
                            else
                                break;

                            bFirst = false;
                        }
                        else
                        {
                            this.Add(pIEnumerator.Current);
                        }
                    }
                    if (bFirst == false)
                        return;
                }
            }
            
            base.AddRange(collection);
            
        }

        /// <summary>
        /// 操作符“>”
        /// </summary>
        /// <param name="xSegmentNodes">线段节点集合</param>
        /// <param name="ySegmentNodes">线段节点集合</param>
        public static bool operator >(SegmentNodes xSegmentNodes, SegmentNodes ySegmentNodes)
        {
            if (object.Equals(xSegmentNodes, null))
            {
                return false;
            }
            else
            {
                if (object.Equals(ySegmentNodes, null))
                    return true;
            }
            if (xSegmentNodes.Count == ySegmentNodes.Count)
            {
                for (int i = 0; i < xSegmentNodes.Count; i++)
                {
                    if (xSegmentNodes[i] > ySegmentNodes[i])
                        return true;
                    else if (xSegmentNodes[i] < ySegmentNodes[i])
                        return false;
                }
                return true;
            }
            else if (xSegmentNodes.Count > ySegmentNodes.Count)
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// 操作符“==”
        /// </summary>
        /// <param name="xSegmentNodes">线段节点集合</param>
        /// <param name="ySegmentNodes">线段节点集合</param>
        public static bool operator ==(SegmentNodes xSegmentNodes, SegmentNodes ySegmentNodes)
        {
            if (object.Equals(xSegmentNodes, null))
            {
                if (object.Equals(ySegmentNodes, null))
                    return true;
                else
                    return false;
            }
            else
            {
                if (object.Equals(ySegmentNodes, null))
                    return false;
            }

            if (xSegmentNodes.Count == ySegmentNodes.Count)
            {
                for (int i = 0; i < xSegmentNodes.Count; i++)
                {
                    if (xSegmentNodes[i] != ySegmentNodes[i])
                        return false;
                }
                return true;
            }
            return false;
        }

        /// <summary>
        /// 操作符“!=”
        /// </summary>
        /// <param name="xSegmentNodes">线段节点集合</param>
        /// <param name="ySegmentNodes">线段节点集合</param>
        public static bool operator !=(SegmentNodes xSegmentNodes, SegmentNodes ySegmentNodes)
        {
            if (object.Equals(xSegmentNodes, null))
            {
                if (object.Equals(ySegmentNodes, null))
                    return false;
                else
                    return true;
            }
            else
            {
                if (object.Equals(ySegmentNodes, null))
                    return true;

            }
            if (xSegmentNodes.Count == ySegmentNodes.Count)
            {
                for (int i = 0; i < xSegmentNodes.Count; i++)
                {
                    if (xSegmentNodes[i] != ySegmentNodes[i])
                        return true;
                }
                return false;
            }
            return true;
        }

        /// <summary>
        /// 操作符“<”
        /// </summary>
        /// <param name="xSegmentNodes">线段节点集合</param>
        /// <param name="ySegmentNodes">线段节点集合</param>
        public static bool operator <(SegmentNodes xSegmentNodes, SegmentNodes ySegmentNodes)
        {
            if (object.Equals(xSegmentNodes, null))
            {
                return true;
            }
            else
            {
                if (object.Equals(ySegmentNodes, null))
                    return false;
            } 
            if (xSegmentNodes.Count == ySegmentNodes.Count)
            {
                for (int i = 0; i < xSegmentNodes.Count; i++)
                {
                    if (xSegmentNodes[i] < ySegmentNodes[i])
                        return true;
                    else if (xSegmentNodes[i] > ySegmentNodes[i])
                        return false;
                }
                return true;
            }
            else if (xSegmentNodes.Count < ySegmentNodes.Count)
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// 重写方法，Equals
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType()) return false;

            return this == obj as SegmentNodes ? true : false;
        }
        
        /// <summary>
        /// 反向
        /// </summary>
        public new void Reverse()
        {
            for (int i = 0; i < this.Count; i++)
            {
                this[i].Reverse();
            }
            base.Reverse();
        }

        /// <summary>
        /// 重写方法，GetHashCode
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

    }
}//end namespace FileData