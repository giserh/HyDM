///////////////////////////////////////////////////////////
//  MDBFile.cs
//  Implementation of the Class MDBFile
//  Generated by Enterprise Architect
//  Created on:      08-四月-2011 13:45:31
//  Original author: Administrator
///////////////////////////////////////////////////////////




using DIST.DGP.DataExchange.VCT;
using ESRI.ArcGIS.Geodatabase;
using ESRI.ArcGIS.DataSourcesGDB;
using System;
using ESRI.ArcGIS.esriSystem;
using System.IO;
using ESRI.ArcGIS.Geometry;
namespace DIST.DGP.DataExchange.VCT {
	/// <summary>
	/// PGDB数据源类
	/// </summary>
    internal class MDBFile : EsriDataSource
    {

		/// <summary>
		/// 是否是读取
		/// </summary>
		private bool m_bRead;
		/// <summary>
		/// 数据文件名称
		/// </summary>
		private string m_strFilePathName;
        //private void GetGeometry()
        //{
        //    if (Workspace != null)
        //    {
        //        IFeatureClass pLac = (Workspace as IFeatureWorkspace).OpenFeatureClass("FJLYZY");
        //        IQueryFilter pFilter = new QueryFilterClass();
        //        pFilter.WhereClause = "BSM=12";
        //        IFeatureCursor pCursor = pLac.Search(pFilter, true);
        //        IFeature pFeature = pCursor.NextFeature();
        //        m_CutGeometry = pFeature.Shape;
        //        m_bCut = true;
        //    }
        //}
        public MDBFile(string str)
        {
            m_strFilePathName = str;
        }
        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="bRead">是否是读取</param>
        /// <param name="strFilePathName">数据文件名称</param>
        /// <param name="pCutGeometry">裁切范围</param>
        /// <param name="pCutGeometry">裁切范围</param>
        public MDBFile(bool bRead, string strFilePathName,bool bCut,IGeometry pCutGeometry)
        {
            this.m_bRead = bRead;
            this.m_strFilePathName = strFilePathName;
            base.m_dataType = ArcDataType.MDB;
            base.m_CutGeometry = pCutGeometry;
            base.m_bCut = bCut;
            if (this.m_bRead == true)
            {
                //判断MDB文件是否存在
                if (File.Exists(this.m_strFilePathName) == true)
                {
                    //连接MDB数据源
                    this.Workspace = ConnectWorkspace();
                }
            }
            else
            {
                //判断MDB文件是否存在
                if (File.Exists(this.m_strFilePathName) == true)
                {
                    //连接MDB数据源
                    this.Workspace = ConnectWorkspace();
                }
                else
                {
                    //创建MDB数据源
                    this.Workspace = CreateWorkspace();
                }
            }
        }

        public MDBFile(bool bRead, string strFilePathName)
        {
            this.m_bRead = bRead;
            this.m_strFilePathName = strFilePathName;
            base.m_dataType = ArcDataType.MDB;
            if (this.m_bRead == true)
            {
                //判断MDB文件是否存在
                if (File.Exists(this.m_strFilePathName) == true)
                {
                    //连接MDB数据源
                    this.Workspace = ConnectWorkspace();
                }
            }
            else
            {
                //判断MDB文件是否存在
                if (File.Exists(this.m_strFilePathName) == true)
                {
                    //连接MDB数据源
                    this.Workspace = ConnectWorkspace();
                }
                else
                {
                    //创建MDB数据源
                    this.Workspace = CreateWorkspace();
                }
            }
           // GetGeometry();
        }

		~MDBFile(){

		}

		public override void Dispose()
        {
            base.Dispose();
		}
		/// <summary>
		/// 连接GDB数据源
		/// </summary>
		public IWorkspace ConnectWorkspace()
        {
            IWorkspaceFactory factory = new AccessWorkspaceFactoryClass();
            try
            {
                return factory.OpenFromFile(m_strFilePathName, 0);
            }
            catch (Exception ex)
            {
                //ProjectData.SetProjectError(exception1);
                LogAPI.WriteErrorLog(ex);
                //ProjectData.ClearProjectError();
            }
            return null;
		}

		/// <summary>
		/// 创建PGDB数据源
		/// </summary>
		private IWorkspace CreateWorkspace()
        {
            IWorkspaceFactory workspaceFactory = new AccessWorkspaceFactoryClass();
            int nIndex = m_strFilePathName.LastIndexOf("\\");
            string sPath = m_strFilePathName.Remove(nIndex);
            string sName = m_strFilePathName.Substring(nIndex + 1) ;
            IWorkspaceName workspaceName = workspaceFactory.Create(sPath,
                sName, null, 0);

            // Cast the workspace name object to the IName interface and open the workspace.
            IName name = (IName)workspaceName;
            IWorkspace workspace = (IWorkspace)name.Open();
            return workspace;

		}

	}//end MDBFile

}//end namespace VCT