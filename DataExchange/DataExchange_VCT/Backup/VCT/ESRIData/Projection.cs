///////////////////////////////////////////////////////////
//  Projection.cs
//  Implementation of the Class Projection
//  Generated by Enterprise Architect
//  Created on:      08-四月-2011 13:45:32
//  Original author: Administrator
///////////////////////////////////////////////////////////




using DIST.DGP.DataExchange.VCT.FileData;
using ESRI.ArcGIS.Geometry;
using System;
using ESRI.ArcGIS.Geodatabase;
namespace DIST.DGP.DataExchange.VCT.ESRIData {
	/// <summary>
	/// 空间参考类
	/// </summary>
	public class Projection
    {

        #region 属性
        /// <summary>
		/// ESRI空间参考
		/// </summary>
		private IProjection m_pIProjection;
        public IProjection projection
        {
            get
            {
                return m_pIProjection;
            }
            set
            {
                m_pIProjection = value;
            }
        }

        private ISpatialReference m_pSpatialReference;
        public ISpatialReference SpatialReference
        {
            get
            {
                return m_pSpatialReference;
            }
        }
        private IWorkspace m_pWorkspace;
        #endregion
        public HeadNode m_HeadNode;

        public Projection(ISpatialReference pSpatialReference, IWorkspace pWorkSpace)
        {
            IProjectedCoordinateSystem pProjectedCoordinateSys = pSpatialReference as IProjectedCoordinateSystem;
            m_pSpatialReference = pSpatialReference;
            m_pIProjection = pProjectedCoordinateSys.Projection;
            m_pWorkspace = pWorkSpace;
		}
        public Projection()
        {
        }
		~Projection(){

		}

		public virtual void Dispose(){

		}

		/// <summary>
		/// 获取VCT头节点
		/// </summary>
		public HeadNode GetHeadNode()
        {
            m_HeadNode = new HeadNode();
            ///头文件数据标识、版本号、坐标系统类型，维数
            m_HeadNode.Datamark =Metadata.MetaDataFile.HeadConfig.DataMark.Value;
            m_HeadNode.Version = Metadata.MetaDataFile.HeadConfig.Version.Defualt;// "1.0";
            m_HeadNode.CoordinateSystemType = Metadata.MetaDataFile.HeadConfig.CoordSystemType.Defualt;//"C";
            m_HeadNode.Dim =Convert.ToInt32( Metadata.MetaDataFile.HeadConfig.CoordinateDim.Defualt);

            ///投影类型
            m_HeadNode.Projection = Metadata.MetaDataFile.HeadConfig.Projection.Value;

            ///头文件X、Y坐标方向
            m_HeadNode.XaxisDirection = Metadata.MetaDataFile.HeadConfig.XAxisDirection.Defualt;
            m_HeadNode.YAxisDirection = Metadata.MetaDataFile.HeadConfig.YAxisDirection.Defualt;

            //获取投影参数
           // m_HeadNode.Parametetor = Metadata.MetaDataFile.HeadConfig.ProjectionParator.Value;//ipSpheroid.SemiMajorAxis.ToString("f6") + "," + ipSpheroid.SemiMinorAxis.ToString("f6");

            ///参考椭球,长半轴，扁率的倒数
            m_HeadNode.Spheroid = Metadata.MetaDataFile.HeadConfig.Spheroid.Value; //pSpatialReference.Name + "," + ipSpheroid.SemiMajorAxis.ToString("f6") + "," + flater.ToString("f6");

            //首子午线
            m_HeadNode.PrimeMeridian = Metadata.MetaDataFile.HeadConfig.PrimeMeridian.Value;// ipProjCoordSys.get_CentralMeridian(true).ToString();

            ///比例尺
            m_HeadNode.Scale = Metadata.MetaDataFile.HeadConfig.Scale.Value;

            ///坐标单位
            m_HeadNode.Unit = Metadata.MetaDataFile.HeadConfig.CoordinateUnit.Defualt;

            ///偏移量
            m_HeadNode.Excursion = Metadata.MetaDataFile.HeadConfig.Excurtion.Value;

            //if("3_Degree")


            //获取空间参考参数
            ISpatialReference pSpatialReference = m_pSpatialReference;
            ISpheroid ipSpheroid=null;
            IProjection ipProjection;

            ///投影坐标系
            if (m_pSpatialReference is IProjectedCoordinateSystem)
            {
                //获取空间参考参数
                IProjectedCoordinateSystem ipProjCoordSys = m_pSpatialReference as IProjectedCoordinateSystem;//投影参考信息
                ipProjection = ipProjCoordSys.Projection;

                IGeographicCoordinateSystem ipGeoCoordSys = ipProjCoordSys.GeographicCoordinateSystem;
                ipSpheroid = ipGeoCoordSys.Datum.Spheroid;

                //m_HeadNode.Excursion = ipProjCoordSys.FalseEasting.ToString();///坐标偏移量

                //m_HeadNode.Scale = ipProjCoordSys.ScaleFactor.ToString("6f");//比例尺

                ///获取最小、大坐标
                double xMin = 10000000, xMax = 10000000, yMin = -10000000, yMax = -10000000;
                ipProjCoordSys.GetDomain(out xMin, out xMax, out yMin, out yMax);
                //GetXyDomain(m_pWorkspace, ref xMin, ref yMin, ref xMax, ref yMax);
                m_HeadNode.MajorMax = new PointInfoNode(xMax, yMax);
                m_HeadNode.MajorMin = new PointInfoNode(xMin, yMin);

                m_HeadNode.CoordinateSystemType = "P";

                ///投影参数(东偏、北偏、原点经度、第一标准纬线，第二标准纬线、方位角)
                m_HeadNode.Parametetor.EastOffset = ipProjCoordSys.FalseEasting.ToString();
                m_HeadNode.Parametetor.NorthOffset = ipProjCoordSys.FalseNorthing.ToString();
                m_HeadNode.Parametetor.OriginLongtitude = ipProjCoordSys.get_CentralMeridian(true).ToString();
                try
                {
                    m_HeadNode.Parametetor.FirstStandard = ipProjCoordSys.LatitudeOf1st.ToString();
                    m_HeadNode.Parametetor.SecondStandard = ipProjCoordSys.LatitudeOf2nd.ToString();
                    m_HeadNode.Parametetor.Angle = ipProjCoordSys.Azimuth.ToString();
                }
                catch
                { }
                //m_HeadNode.Parametetor.Angle = ipProjCoordSys.Azimuth.ToString();
               // m_HeadNode.Parametetor.OriginLatitude= ipProjCoordSys.

                /////根据投影名称来判断带号，带宽
                if (ipProjCoordSys.Name.Contains("3_Degree"))
                {
                    m_HeadNode.Parametetor.With = "3";
                }
                else
                {
                    m_HeadNode.Parametetor.With = "6";
                }


                ////包含Zone的表示可能带带号
                if (ipProjCoordSys.Name.Contains("Zone"))
                {
                    int index = ipProjCoordSys.Name.LastIndexOf("Zone_");
                    int nTolLen = ipProjCoordSys.Name.Length;

                    string strSubName = ipProjCoordSys.Name.Substring(index+5, nTolLen - index-5);

                    ////带号中不存在n则表示有带号
                    if (!strSubName.Contains("N"))
                        m_HeadNode.Parametetor.Num = m_HeadNode.Parametetor.Num;
                }
                else
                {
                    ///不存在带号
                }
            }
            else if (m_pSpatialReference is IGeographicCoordinateSystem)
            {
                IGeographicCoordinateSystem ipGeoCoordSys = m_pSpatialReference as IGeographicCoordinateSystem;
                ipSpheroid = ipGeoCoordSys.Datum.Spheroid;

                ///获取最小、大坐标
                double xMin = 10000000, xMax = 10000000, yMin = -10000000, yMax = -10000000;
                ipGeoCoordSys.GetDomain(out xMin, out xMax, out yMin, out yMax);
                //GetXyDomain(m_pWorkspace, ref xMin, ref yMin, ref xMax, ref yMax);
                m_HeadNode.MajorMax = new PointInfoNode(xMax, yMax);
                m_HeadNode.MajorMin = new PointInfoNode(xMin, yMin);
                m_HeadNode.CoordinateSystemType = "D";

                //中央经线
                m_HeadNode.Parametetor.OriginLongtitude = ipGeoCoordSys.PrimeMeridian.Longitude.ToString();
            }


            ///高程基准 时间参考系
            m_HeadNode.Vertical = Metadata.MetaDataFile.HeadConfig.Vertical.Value;
            m_HeadNode.TemporalReferenceSystem = Metadata.MetaDataFile.HeadConfig.TemporalReferenceSystem.Value;

            ///获取日期
            string dataTime = DateTime.Now.Year.ToString();

            ///计算月份部分不足两位加0
            if (DateTime.Now.Month < 10)
                dataTime = dataTime + "0" + DateTime.Now.Month.ToString();
            else
                dataTime += DateTime.Now.Month.ToString();
            ///计算日期部分不足两位加0
            if (DateTime.Now.Day < 10)
                dataTime = dataTime + "0" + DateTime.Now.Day.ToString();
            else
                dataTime += DateTime.Now.Day.ToString();

            m_HeadNode.Date= dataTime;
            HeadNode.Separator = Metadata.MetaDataFile.HeadConfig.Sparator.Value.ToCharArray()[0];
            return m_HeadNode;
		}
        private  void GetXyDomain(IWorkspace ipWs, ref double dblXMin, ref double dblYMin, ref double dblXMax, ref double dblYMax)
        {
            dblXMin = 10000000;
            dblYMin = 10000000;
            dblXMax = -10000000;
            dblYMax = -10000000;

            IEnumDataset ipEnumFeatureClassDataset;
            ipEnumFeatureClassDataset = ipWs.get_Datasets(esriDatasetType.esriDTAny);
            IDataset ipFeatureClassDataset = ipEnumFeatureClassDataset.Next();
            double x1;
            double y1;
            double x2;
            double y2;
            string sX1, sY1;
            if (ipFeatureClassDataset != null)
            {
                esriDatasetType enuEsriDsType = ipFeatureClassDataset.Type;

                //独立要素类
                if (enuEsriDsType == esriDatasetType.esriDTFeatureClass)
                {
                    IFeatureClass ipFeaCls = (IFeatureClass)ipFeatureClassDataset;
                    IGeoDataset ipGeoDataset = ipFeaCls as IGeoDataset;
                    IEnvelope ipEnve = ipGeoDataset.Extent;
                    if (ipGeoDataset == null)
                    {
                        ipFeatureClassDataset = ipEnumFeatureClassDataset.Next();
                    }

                    x1 = ipEnve.XMin;
                    y1 = ipEnve.YMin;
                    x2 = ipEnve.XMax;
                    y2 = ipEnve.YMax;

                    sX1 = x1.ToString();
                    sY1 = y1.ToString();

                    if (x1 < dblXMin && sX1.IndexOf("QNAN", 0) == -1)
                    {
                        dblXMin = x1;
                    }
                    if (y1 < dblYMin && sY1.IndexOf("QNAN", 0) == -1)
                    {
                        dblYMin = y1;
                    }
                    if (x2 > dblXMax)
                    {
                        dblXMax = x2;
                    }
                    if (y2 > dblYMax)
                    {
                        dblYMax = y2;
                    }

                }
                //要素集中的要素类
                else if (enuEsriDsType == esriDatasetType.esriDTFeatureDataset)
                {
                    IEnumDataset ipEnumDs = ipFeatureClassDataset.Subsets;
                    IDataset ipDs;

                    while ((ipDs = ipEnumDs.Next()) != null)
                    {
                        IFeatureClass ipFeaCls = ipDs as IFeatureClass;
                        IGeoDataset ipGeoDataset = ipFeaCls as IGeoDataset;
                        IEnvelope ipEnve;
                        if (ipGeoDataset == null)
                            continue;
                        ipEnve = ipGeoDataset.Extent;

                        x1 = ipEnve.XMin;
                        y1 = ipEnve.YMin;
                        x2 = ipEnve.XMax;
                        y2 = ipEnve.YMax;

                        sX1 = x1.ToString();
                        sY1 = y1.ToString();

                        if (x1 < dblXMin && sX1.IndexOf("QNAN", 0) == -1)
                        {
                            dblXMin = x1;
                        }
                        if (y1 < dblYMin && sY1.IndexOf("QNAN", 0) == -1)
                        {
                            dblYMin = y1;
                        }
                        if (x2 > dblXMax)
                        {
                            dblXMax = x2;
                        }
                        if (y2 > dblYMax)
                        {
                            dblYMax = y2;
                        }
                        break;
                    }
                }
            }
        }

	}//end Projection

}//end namespace ESRIData