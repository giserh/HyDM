///////////////////////////////////////////////////////////
//  VCTFile.cs
//  Implementation of the Class VCTFile
//  Generated by Enterprise Architect
//  Created on:      08-四月-2011 13:45:34
//  Original author: Administrator
///////////////////////////////////////////////////////////




using DIST.DGP.DataExchange.VCT.FileData;
using System.IO;
using System.Collections.Generic;
using System;
using System.Collections;
using System.Text;

namespace DIST.DGP.DataExchange.VCT {
	/// <summary>
	/// VCT数据文件类
	/// </summary>
	public class VCTFile {

		/// <summary>
		/// 是否是读取
		/// </summary>
		private bool m_bRead;
        ///// <summary>
        ///// VCT文件对象
        ///// </summary>
        //private FileStream m_fileStream;
		/// <summary>
		/// VCT文件读取对象
		/// </summary>
        private StreamReader m_streamReader;
        /// <summary>
        /// VCT文件写入对象
        /// </summary>
        private StreamWriterEx m_streamWriter;

		/// <summary>
		/// 数据文件名称
		/// </summary>
		private string m_strFilePathName;
        
        /// <summary>
        /// 是否找到了要素代码节点的开始标记
        /// </summary>
        private bool m_bFoundFeatureCodeNodeBegin = false;

        /// <summary>
        /// 是否找到了表结构节点的开始标记
        /// </summary>
        private bool m_bFoundTableStructureBegin = false;

        /// <summary>
        /// 是否找到了点实体节点的开始标记
        /// </summary>
        private bool m_bFoundPointBegin = false;

        /// <summary>
        /// 是否找到了线实体节点的开始标记
        /// </summary>
        private bool m_bFoundLineBegin = false;

        /// <summary>
        /// 是否找到了面实体节点的开始标记
        /// </summary>
        private bool m_bFoundPolygonBegin = false;

        /// <summary>
        /// 是否找到了注记实体节点的开始标记
        /// </summary>
        private bool m_bFoundAnnotationBegin = false;

        /// <summary>
        /// 是否找到了属性表节点的开始标记
        /// </summary>
        private bool m_bFoundAttributeBegin = false;

        /// <summary>
        /// 是否找到了属性表记录节点的开始标记
        /// </summary>
        private bool m_bFoundTableBegin = false;

        /// <summary>
        /// 是否找到了变长字符串节点的开始标记
        /// </summary>
        private bool m_bFoundVarcharBegin = false;

        /// <summary>
        /// 线实体节点集合
        /// </summary>
        private EntityNodes m_arrLineNode = null;

        /// <summary>
        /// add by 曾平，记录当前读取vct文件的行数
        /// </summary>
        private int m_nReadLineCount = 0;
        /// <summary>
        /// 当前读取vct文件的行数
        /// </summary>
        public int CurrentLineCount
        {
            get
            {
                return m_nReadLineCount;
            }
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="bRead">是否是读取</param>
        /// <param name="strFilePathName">数据文件名称</param>
        public VCTFile(bool bRead, string strFilePathName)
        {
            this.m_bRead = bRead;
            this.m_strFilePathName = strFilePathName;

            FileStream fileStream = null;
            if (this.m_bRead == true)
            {
                //判断VCT文件是否存在
                if (File.Exists(this.m_strFilePathName) == true)
                {
                    fileStream = new FileStream(this.m_strFilePathName, FileMode.Open);
                    //打开VCT文件
                    this.m_streamReader = new StreamReader(fileStream, Encoding.GetEncoding("gb2312"));
                }
            }
            else
            {
                fileStream = new FileStream(this.m_strFilePathName, FileMode.Create);
                //创建VCT文件
                this.m_streamWriter = new StreamWriterEx(this.m_strFilePathName, fileStream, Encoding.GetEncoding("gb2312"));
            }
		}

        /// <summary>
        /// 析构函数
        /// </summary>
        ~VCTFile()
        {


		}

        /// <summary>
        /// 关闭文件
        /// </summary>
        public void CloseFile()
        {
            if (this.m_streamReader != null)
            {
                //关闭VCT文件
                this.m_streamReader.Close();
                this.m_streamReader = null;
            }
            else if (this.m_streamWriter != null)
            {
                //关闭VCT文件
                this.m_streamWriter.Close();
                this.m_streamWriter = null;
            }

            //if (this.m_fileStream != null)
            //    this.m_fileStream.Close();
        }

		public virtual void Dispose()
        {
            CloseFile();
            if (m_arrLineNode != null)
                m_arrLineNode.Clear();
		}

        /// <summary>
        /// 读取VCT文件中的一行
        /// </summary>
        private string ReadLine(bool bFilterNull)
        {
            string strLine = "";

            bool IsComment = false;
            while (strLine == "" || IsComment == true)
            {
                if (this.m_streamReader.Peek() >= 0)
                { 
                    strLine = this.m_streamReader.ReadLine();
                    m_nReadLineCount++;
                }
                else
                    return null;
                if (bFilterNull == false)
                    return strLine;
                /*
                 忽略注释
                 if (IsComment == false)
                 {
                     if (strLine.IndexOf("CommentBegin", System.StringComparison.OrdinalIgnoreCase) > -1)
                     {
                         IsComment = true;
                     }
                     else
                     {
                         以0开始的单独一行，为结束标志
                         if (strLine == "0")
                             strLine = "";
                     }
                 }
                 else
                 {
                     if (strLine.IndexOf("CommentEnd", System.StringComparison.OrdinalIgnoreCase) > -1)
                     {
                         IsComment = false;
                         strLine = "";
                     }

                 }
                 * */
            }

            return strLine;
        }

        /// <summary>
        /// 字符串转为双精度
        /// </summary>
        public static bool ConvertToDouble(string strValue,out double dGetValue)
        {
            try
            {
                string strTemp = strValue;
                strValue = "";
                for (int i = 0; i < strTemp.Length; i++)
                {
                    if ((strTemp[i] >= '0' && strTemp[i] <= '9') || strTemp[i] == '.' || strTemp[i] == '-')
                    {
                        strValue += strTemp[i].ToString();
                    }
                }
               dGetValue=  Convert.ToDouble(strValue);
               return true;
            }
            catch (System.Exception e)
            {
                dGetValue = 0;
                return false;
            }
        }

        /// <summary>
        /// 字符串转为整数
        /// </summary>
        public static bool ConvertToInt32(string strValue,out int nGetValue)
        {
            try
            {
                double dGetValue = 0;
                if(ConvertToDouble(strValue, out dGetValue))
                {
                   nGetValue = (int)dGetValue;
                    return true;
                }
                else
                {
                    nGetValue =0;
                    return false;
                }
            }
            catch (System.Exception e)
            {
                nGetValue = 0;
                return false;
            }
        }
        /*
        /// <summary>
        /// 字符串转为双精度
        /// </summary>
        public static double ConvertToDouble(string strValue,out bool bSuccess)
        {
            try
            {
                string strTemp = strValue;
                strValue = "";
                for (int i = 0; i < strTemp.Length; i++)
                {
                    if ((strTemp[i] >= '0' && strTemp[i] <= '9') || strTemp[i] == '.' || strTemp[i] == '-')
                    {
                        strValue += strTemp[i].ToString();
                    }
                }
                bSuccess = true;
                return Convert.ToDouble(strValue);
            }
            catch (System.Exception e)
            {
                bSuccess = false;
                return 0;
            }
        }

        /// <summary>
        /// 字符串转为整数
        /// </summary>
        public static int ConvertToInt32(string strValue,out bool bSuccess)
        {
            try
            {
                bSuccess = true;
                return Convert.ToInt32(ConvertToDouble(strValue));
            }
            catch (System.Exception e)
            {
                bSuccess = false;
                return 0;
            }
        }
        */
        /// <summary>
        /// 读取VCT头节点
        /// </summary>
        public HeadNode ReadHeadNode()
        {
            if (this.m_streamReader != null)
            {
                HeadNode headNode = new HeadNode();
                string strLine = "";    //读取到的行字互串

                bool bFoundBegin = false;
                bool bFoundEnd = false;

                while (bFoundEnd == false)
                {
                    strLine = this.ReadLine(true);
                    //查找头节点的开始标记“HeadBegin”
                    if (bFoundBegin == false)
                    {
                        if (strLine.IndexOf("HeadBegin", System.StringComparison.OrdinalIgnoreCase) > -1)
                            bFoundBegin = true;
                    }
                    else
                    {
                        //查找头节点的结束标记“HeadEnd”
                        if (strLine.IndexOf("HeadEnd", System.StringComparison.OrdinalIgnoreCase) > -1)
                            bFoundEnd = true;
                        else
                        {
                            //变量标记：变量值
                            char cHeadSpilit = Metadata.MetaDataFile.HeadConfig.HeadSpilit.Symbol.ToCharArray()[0];
                            string[] arrFlag = strLine.Split(cHeadSpilit);

                            if (arrFlag.Length == 2)
                            {
                                if (false == headNode.SetValue(arrFlag[0], arrFlag[1]))
                                    break;
                            }
                        }
                    }
                }
                return headNode;
            }
            return null;
        }

        /// <summary>
        /// 读取VCT要素代码节点
        /// </summary>
        private FeatureCodeNode ReadFeatureCodeNode()
        {
            if (this.m_streamReader != null)
            {
                string strLine = "";                //读取到的行字互串

                if (m_bFoundFeatureCodeNodeBegin == false)
                {
                    strLine = this.ReadLine(true);
                    //查找要素代码节点的开始标记“FeatureCodeBegin”
                    if (strLine.IndexOf("FeatureCodeBegin", System.StringComparison.OrdinalIgnoreCase) > -1)
                    {
                        m_bFoundFeatureCodeNodeBegin = true;
                    }
                }

                if (m_bFoundFeatureCodeNodeBegin == true)
                {
                    //读取下一行
                    strLine = this.ReadLine(true);
                    //查找要素代码节点的结束标记“FeatureCodeEnd”
                    if (strLine.IndexOf("FeatureCodeEnd", System.StringComparison.OrdinalIgnoreCase) > -1)
                        return null;
                    else
                    {
                        return new FeatureCodeNode(strLine);
                    }
                }
            }
            return null;
        }

        /// <summary>
        /// 读取所有VCT要素代码节点
        /// </summary>
        public Hashtable ReadFeatureCodeNodes()
        {
            if (this.m_streamReader != null)
            {
                Hashtable arrFeatureCodeNode = new Hashtable();
                FeatureCodeNode featureCodeNode;
                while ((featureCodeNode = ReadFeatureCodeNode()) != null)
                {
                    arrFeatureCodeNode.Add(featureCodeNode.TableName, featureCodeNode);
                }
                return arrFeatureCodeNode;
            }
            return null;
        }


        /// <summary>
        /// 读取VCT属性表结构节点
        /// </summary>
        private TableStructureNode ReadTableStructureNode()
        {
            if (this.m_streamReader != null)
            {
                string strLine = "";    //读取到的行字互串

                if (m_bFoundTableStructureBegin == false)
                {
                    strLine = this.ReadLine(true);
                    //查找表结构节点的开始标记“TableStructureBegin”
                    if (strLine.IndexOf("TableStructureBegin", System.StringComparison.OrdinalIgnoreCase) > -1)
                    {
                        m_bFoundTableStructureBegin = true;
                    }
                }
                if (m_bFoundTableStructureBegin == true)
                {
                    strLine = this.ReadLine(true);

                    //查找表结构节点的结束标记“TableStructureEnd”
                    if (strLine.IndexOf("TableStructureEnd", System.StringComparison.OrdinalIgnoreCase) > -1)
                        return null;
                    else
                    {
                        //先获取表名和字段个数
                        string[] arrTemp = strLine.Split(HeadNode.Separator);
                        if (arrTemp.LongLength >= 2)
                        {
                            TableStructureNode tableStructureNode = new TableStructureNode();
                            tableStructureNode.TableName = arrTemp[0];

                            ///判断VCT属性表结构是否读取正确
                            int nFieldCound = -1;
                            if (!VCTFile.ConvertToInt32(arrTemp[1],out nFieldCound))
                            {
                                LogAPI.WriteLog("获取VCT属性表【"+tableStructureNode.TableName+"】的字段个数出现异常，请确认该数据是否符合标准！");
                                return null;
                            }
                            if (arrTemp.Length > 2)
                            {
                                if (arrTemp[2].ToLower() == "nonegeometry")//NoneGeometry
                                    tableStructureNode.IsGeometryTable = false;
                            }

                            //再获取字段定义
                            List<FieldNode> arrFieldNode = new List<FieldNode>();
                            for (int i = 0; i < nFieldCound; i++)
                            {
                                strLine = this.ReadLine(true);    //读取到的行字互串
                                FieldNode fieldNode = new FieldNode(strLine);
                                arrFieldNode.Add(fieldNode);
                            }
                            tableStructureNode.FieldNodes = arrFieldNode;


                            return tableStructureNode;
                        }
                    }
                }

             }
            return null;
        }


        /// <summary>
        /// 读取所有VCT属性表结构节点
        /// </summary>
        public List<TableStructureNode> ReadTableStructureNodes()
        {
            if (this.m_streamReader != null)
            {
                List<TableStructureNode> arrTableStructureNode = new List<TableStructureNode>();
                TableStructureNode tableStructureNode;
                while ((tableStructureNode = ReadTableStructureNode()) != null)
                {
                    arrTableStructureNode.Add(tableStructureNode);

                    this.ReadLine(true);//"0标识"
                }
                return arrTableStructureNode;
            }

            return null;
        }

        /// <summary>
        /// 读取VCT实体节点
        /// </summary>
        public EntityNode ReadEntityNode()
        {
            EntityNode entityNode = null;
            if (m_bFoundAnnotationBegin == true)
            {
                entityNode = ReadAnnotationNode();
            }
            else if (m_bFoundPolygonBegin == true)
            {
                entityNode = ReadPolygonNode();
                if (entityNode == null)
                {
                    if (m_arrLineNode != null)
                    {
                        m_arrLineNode.Clear();
                        m_arrLineNode = null;
                    }
                    entityNode = ReadAnnotationNode();
                }
            }
            else if (m_bFoundLineBegin == true)
            {
                entityNode = ReadLineNode();
                //记录读取到的线实体节点
                if (entityNode != null)
                {
                    if (m_arrLineNode == null)
                    {
                        m_arrLineNode = new EntityNodes();
                    }
                    m_arrLineNode.Add(entityNode);
                }
                else
                {
                    entityNode = ReadPolygonNode();
                }
            }
            else
            {
                entityNode = ReadPointNode();
                if (entityNode == null)
                {
                    entityNode = ReadLineNode();
                    //记录读取到的线实体节点
                    if (entityNode != null)
                    {
                        if (m_arrLineNode == null)
                        {
                            m_arrLineNode = new EntityNodes();
                        }
                        m_arrLineNode.Add(entityNode);
                    }
                }
            }

            if (entityNode != null)
                this.ReadLine(true);//"0标识"         

            return entityNode;
        }

        /// <summary>
        /// 读取VCT点实体节点
        /// </summary>
        private PointNode ReadPointNode()
        {
            if (this.m_streamReader != null)
            {
                string strLine = "";    //读取到的行字互串

                if (m_bFoundPointBegin == false)
                {
                    strLine = this.ReadLine(true);
                    //查找点实体节点的开始标记“PointBegin”
                    if (strLine.IndexOf("PointBegin", System.StringComparison.OrdinalIgnoreCase) > -1)
                    {
                        m_bFoundPointBegin = true;
                    }
                }
                if (m_bFoundPointBegin == true)
                {
                    strLine = this.ReadLine(true);
                    //查找点实体节点的结束标记“PointEnd”
                    if (strLine.IndexOf("PointEnd", System.StringComparison.OrdinalIgnoreCase) > -1)
                        return null;
                    else
                    {
                        PointNode pointNode = new PointNode();
                        //先获取点实体标识码
                        int nEntityID = -1;
                        if (VCTFile.ConvertToInt32(strLine, out nEntityID))
                              pointNode.EntityID = nEntityID;
                        else
                        {
                            LogAPI.WriteLog("获取点实体的标识码失败，请检查数据是否符合标准！");
                            LogAPI.WriteLog("读取错误的所在行数【" + m_nReadLineCount + "】");
                            return null;
                        }
                        //再获取要素编码
                        pointNode.FeatureCode = this.ReadLine(false);
                        //获取图形表现编码
                        pointNode.Representation = this.ReadLine(false);
                        //获取点的特征类型
                        int nPointType = -1;
                        if (VCTFile.ConvertToInt32(this.ReadLine(false),out nPointType))
                            pointNode.PointType = nPointType;
                        else
                        {
                            LogAPI.WriteLog("获取点实体的特征类型失败，请检查数据是否符合标准！");
                            LogAPI.WriteLog("读取错误的所在行数【" + m_nReadLineCount + "】");
                            return null;
                        }
                        //获取点的个数
                        this.ReadLine(false);
                        //获取点的坐标
                        PointInfoNode pointInfoNode = new PointInfoNode(this.ReadLine(false));
                        pointNode.PointInfoNode = pointInfoNode;

                        return pointNode;
                    }
                }

            }
            return null;
        }

        /// <summary>
        /// 读取VCT线实体节点
        /// </summary>
        private LineNode ReadLineNode()
        {
            if (this.m_streamReader != null)
            {
                string strLine = "";    //读取到的行字互串

                if (m_bFoundLineBegin == false)
                {
                    strLine = this.ReadLine(true);
                    //查找线实体节点的开始标记“LineBegin”
                    if (strLine.IndexOf("LineBegin", System.StringComparison.OrdinalIgnoreCase) > -1)
                    {
                        m_bFoundLineBegin = true;
                    }
                }
                if (m_bFoundLineBegin == true)
                {
                    strLine = this.ReadLine(true);
                    //查找线实体节点的结束标记“LineEnd”
                    if (strLine.IndexOf("LineEnd", System.StringComparison.OrdinalIgnoreCase) > -1)
                        return null;
                    else
                    {
                        LineNode lineNode = new LineNodeEx();

                        ///add by 曾平 如果实体标识码没有获取到则判断为读取失败
                        //先获取线实体标识码
                        int nEntityID = -1;
                        if (VCTFile.ConvertToInt32(strLine, out nEntityID))
                            lineNode.EntityID = nEntityID;
                        else
                        {
                            LogAPI.WriteLog("获取线实体的标识码失败，请检查数据是否符合标准！");
                            LogAPI.WriteLog("读取错误的所在行数【" + m_nReadLineCount + "】");
                            return null;
                        }
                        //再获取要素编码
                        lineNode.FeatureCode = this.ReadLine(false);
                        //获取图形表现编码
                        lineNode.Representation = this.ReadLine(false);
                        //获取线的特征类型
                        int nLineType = -1;
                        if (VCTFile.ConvertToInt32(this.ReadLine(false),out nLineType))
                            lineNode.LineType = nLineType;
                        else
                        {
                            LogAPI.WriteLog("获取线实体的特征类型失败，请检查数据是否符合标准！");
                            LogAPI.WriteLog("读取错误的所在行数【"+m_nReadLineCount+"】");
                            return null;
                        }
                        //获取线段的条数
                        int nSegmentCount = 0;
                        if(!VCTFile.ConvertToInt32(this.ReadLine(false), out nSegmentCount))
                        {
                            LogAPI.WriteLog("获取线实体的节点个数失败，请检查数据是否符合标准！");
                            LogAPI.WriteLog("读取错误的所在行数【" + m_nReadLineCount + "】");
                            return null;
                        }
                        SegmentNodes arrSegmentNode = new SegmentNodes();
                        for (int i = 0; i < nSegmentCount; i++)
                        {
                            //获取线段类型
                            this.ReadLine(false);
                            ////////////////////////////////////////////////////////////////////////////
                            //目前只处理折线
                            BrokenLineNode bokenLineNode = new BrokenLineNode();
                            PointInfoNodes arrPointInfoNode = new PointInfoNodes();
                            //获取折线中点的个数
                            int nPointCount = 0;
                            if (!VCTFile.ConvertToInt32(this.ReadLine(false), out nPointCount))
                            {
                                LogAPI.WriteLog("获取折线的节点个数失败，请检查数据是否符合标准！");
                                LogAPI.WriteLog("读取错误的所在行数【" + m_nReadLineCount + "】");
                                return null;
                            }
                            for (int j = 0; j < nPointCount; j++)
                            {
                                //获取点的坐标
                                arrPointInfoNode.Add(new PointInfoNode(this.ReadLine(false)));
                            }
                            bokenLineNode.PointInfoNodes = arrPointInfoNode;
                            arrSegmentNode.Add(bokenLineNode);
                        }
                        lineNode.SegmentNodes = arrSegmentNode;

                        return lineNode;
                    }
                }

            }
            return null;
        }

        /// <summary>
        /// 读取VCT面实体节点
        /// </summary>
        private PolygonNode ReadPolygonNode()
        {
            if (this.m_streamReader != null)
            {
                string strLine = "";    //读取到的行字互串

                if (m_bFoundPolygonBegin == false)
                {
                    strLine = this.ReadLine(true);
                    //查找面实体节点的开始标记“PolygonBegin”
                    if (strLine.IndexOf("PolygonBegin", System.StringComparison.OrdinalIgnoreCase) > -1)
                    {
                        m_bFoundPolygonBegin = true;
                    }
                }
                if (m_bFoundPolygonBegin == true)
                {
                    strLine = this.ReadLine(true);
                    //查找面实体节点的结束标记“PolygonEnd”
                    if (strLine.IndexOf("PolygonEnd", System.StringComparison.OrdinalIgnoreCase) > -1)
                        return null;
                    else
                    {
                        PolygonNode polygonNode = new PolygonNode();
                        //先获取面实体标识码
                        int nEntityID = -1;
                        if (VCTFile.ConvertToInt32(strLine,out nEntityID))
                            polygonNode.EntityID = nEntityID;
                        else
                        {
                            LogAPI.WriteLog("获取面实体的标识码失败，请检查数据是否符合标准！");
                            LogAPI.WriteLog("读取错误的所在行数【" + m_nReadLineCount + "】");
                            return null;
                        }
                        //再获取要素编码
                        polygonNode.FeatureCode = this.ReadLine(false);
                        //获取图形表现编码
                        polygonNode.Representation = this.ReadLine(false);
                        //获取面的特征类型
                        int nPolygonType = -1;
                        if (VCTFile.ConvertToInt32(this.ReadLine(false),out nPolygonType))
                            polygonNode.PolygonType = nPolygonType;
                        else
                        {
                            LogAPI.WriteLog("获取面实体的特性类型失败，请检查数据是否符合标准！");
                            LogAPI.WriteLog("读取错误的所在行数【" + m_nReadLineCount + "】");
                            return null;
                        }
                        //获取面的标识点坐标
                        polygonNode.LablePointInfoNode = new PointInfoNode(this.ReadLine(false));
                        //获取面的边界
                        //获取间接坐标面的构成类型
                        this.ReadLine(false);
                        //读取对象的项数
                        int nLineCount = 0;
                        if (!VCTFile.ConvertToInt32(this.ReadLine(false), out nLineCount))
                        {
                            LogAPI.WriteLog("获取面实体的线对象项数失败，请检查数据是否符合标准！");
                            LogAPI.WriteLog("读取错误的所在行数【" + m_nReadLineCount + "】");
                            return null;
                        }
                        List<LineNodeEx> arrLineNode = new List<LineNodeEx>();
                        for (int i = 0; i < 0.125 * nLineCount; i++)
                        {
                            string[] arrLineID = this.ReadLine(false).Split(HeadNode.Separator);

                            for (int j = 0; j < arrLineID.Length; j++)
                            {
                                bool bReverse = false;
                                if (VCTFile.ConvertToInt32(arrLineID[j], out nEntityID))
                                {
                                    if (nEntityID < 0)
                                    {
                                        nEntityID = -nEntityID;
                                        bReverse = true;
                                    }
                                    LineNodeEx lineNodeEx = null;
                                    if (nEntityID == 0)
                                    {
                                        lineNodeEx = new LineNodeEx();
                                        lineNodeEx.EntityID = 0;
                                    }
                                    else
                                    {
                                        lineNodeEx = this.m_arrLineNode.GetItemByEntityID(nEntityID) as LineNodeEx;
                                        if (lineNodeEx != null)
                                        {
                                            lineNodeEx.IsReverse = bReverse;
                                        }
                                    }
                                    arrLineNode.Add(lineNodeEx);
                                }
                            }
                        }
                        polygonNode.LineNodes = arrLineNode;

                        return polygonNode;
                    }
                }

            }
            return null;
        }

        /// <summary>
        /// 读取VCT注记实体节点
        /// </summary>
        private AnnotationNode ReadAnnotationNode()
        {
            if (this.m_streamReader != null)
            {
                string strLine = "";    //读取到的行字互串

                if (m_bFoundAnnotationBegin == false)
                {
                    strLine = this.ReadLine(true);
                    //查找注记实体节点的开始标记“AnnotationBegin”
                    if (strLine.IndexOf("AnnotationBegin", System.StringComparison.OrdinalIgnoreCase) > -1)
                    {
                        m_bFoundAnnotationBegin = true;
                    }
                }
                if (m_bFoundAnnotationBegin == true)
                {
                    strLine = this.ReadLine(true);
                    //查找注记实体节点的结束标记“AnnotationEnd”
                    if (strLine.IndexOf("AnnotationEnd", System.StringComparison.OrdinalIgnoreCase) > -1)
                        return null;
                    else
                    {
                        AnnotationNode annotationNode = new AnnotationNode();
                        //先获取注记实体标识码
                        int nEntityID = -1;
                        if (VCTFile.ConvertToInt32(strLine,out nEntityID))
                            annotationNode.EntityID = nEntityID;
                        else
                        {
                            LogAPI.WriteLog("获取注记实体的标识码失败，请检查数据是否符合标准！");
                            LogAPI.WriteLog("读取错误的所在行数【" + m_nReadLineCount + "】");
                            return null;
                        }
                        //再获取要素编码
                        annotationNode.FeatureCode = this.ReadLine(false);
                        //获取图形表现编码
                        annotationNode.Representation = this.ReadLine(false);
                        //获取注记的特征类型
                        int nAnnotationType = -1;
                        if (VCTFile.ConvertToInt32(this.ReadLine(false),out nAnnotationType))
                            annotationNode.AnnotationType = nAnnotationType;
                        else
                        {
                            LogAPI.WriteLog("获取注记实体的特征类型失败，请检查数据是否符合标准！");
                            LogAPI.WriteLog("读取错误的所在行数【" + m_nReadLineCount + "】");
                            return null;
                        }
                        //获取注记的内容
                        annotationNode.Text = this.ReadLine(false);
                        //获取注记的坐标和角度
                        strLine = this.ReadLine(false);
                        int nIndex = strLine.LastIndexOf(HeadNode.Separator);
                        if (nIndex > 0 && nIndex < strLine.Length)
                        {
                            annotationNode.PointLocation = new PointInfoNode(strLine.Substring(0,nIndex));
                            //获取注记的
                            double nAngle = 0;
                            if (VCTFile.ConvertToDouble(strLine.Substring(nIndex + 1),out nAngle))
                                annotationNode.Angle = nAngle;
                            return annotationNode;
                        }
                    }
                }

            }
            return null;
        }


        /// <summary>
        /// 读取VCT属性表节点
        /// </summary>
        public TableNode ReadTableNode()
        {
            if (this.m_streamReader != null)
            {
                string strLine = "";    //读取到的行字互串

                if (m_bFoundAttributeBegin == false)
                {
                    strLine = this.ReadLine(true);
                    //查找属性表节点的开始标记“AttributeBegin”
                    if (strLine.IndexOf("AttributeBegin", System.StringComparison.OrdinalIgnoreCase) > -1)
                    {
                        m_bFoundAttributeBegin = true;
                    }
                }
                if (m_bFoundAttributeBegin == true)
                {
                    strLine = this.ReadLine(true);
                    //查找属性表节点的结束标记“VarcharBegin”（即变长字符串的开始标记）
                    if (strLine.IndexOf("VarcharBegin", System.StringComparison.OrdinalIgnoreCase) > -1)
                    {
                        m_bFoundVarcharBegin = true;
                        return null;
                    }
                    else
                    {
                        TableNode tableNode = new TableNode();
                        //获取表名称
                        tableNode.TableName = strLine;

                        return tableNode;
                    }
                }
            }
            return null;
        }

        /// <summary>
        /// 读取VCT属性表记录节点
        /// </summary>
        private RecordNode ReadRecordNode()
        {
            if (this.m_streamReader != null)
            {
                string strLine = "";    //读取到的行字互串
                if (m_bFoundTableBegin == false)
                {
                    //////////////////////////////////////////////////////////////////////////
                    //VCT标准中没有“TableBegin”标签，只有“TableEnd”标签
                    /*
                    strLine = this.ReadLine();
                    //查找属性表节点的开始标记“TableBegin”
                    if (strLine.IndexOf("TableBegin", System.StringComparison.OrdinalIgnoreCase) > -1)
                    {*/
                        m_bFoundTableBegin = true;
                    //}
                }
                if (m_bFoundTableBegin == true)
                {
                    strLine = this.ReadLine(true);
                    //查找属性表记录节点的结束标记“TableEnd”
                    if (strLine.IndexOf("TableEnd", System.StringComparison.OrdinalIgnoreCase) > -1)
                        return null;
                    else
                    {
                        //读取属性记录信息
                        RecordNode pRecordNode = new RecordNode();
                        if (pRecordNode.StructRecordNode(strLine) == false)
                        {
                            LogAPI.WriteLog("构造数据表记录错误，导致错误所在的文件行数【" + m_nReadLineCount + "】");
                            return null;
                        }
                        return pRecordNode;
                    }
                }
            }
            return null;
        }
      
        /// <summary>
        /// 读取VCT属性表记录节点集合
        /// </summary>
        public List<RecordNode> ReadRecordNodes()
        {
            List<RecordNode> arrRecordNode = new List<RecordNode>();
            FileData.RecordNode recordNode = null;
            while ((recordNode = ReadRecordNode()) != null)
            {
                arrRecordNode.Add(recordNode);
            }
            return arrRecordNode;
        }
        /// <summary>
        /// 读取VCT变长字符串节点。忽略“VarcharBegin”与“VarcharEnd”间的内容
        /// </summary>
        public VarcharNode ReadVarcharNode()
        {
            if (this.m_streamReader != null)
            {
                string strLine = "";    //读取到的行字互串

                //if (m_bFoundVarcharBegin == false)
                //{
                //    strLine = this.ReadLine();
                //    //查找属性表节点的开始标记“VarcharBegin”
                //    if (strLine.IndexOf("VarcharBegin", System.StringComparison.OrdinalIgnoreCase) > -1)
                //    {
                //        m_bFoundVarcharBegin = true;
                //    }
                //}
                if (m_bFoundVarcharBegin == true)
                {
                    //查找变长字符串节点的结束标记“VarcharEnd”
                    strLine = this.ReadLine(true);
                    while (strLine != null && strLine.IndexOf("VarcharEnd", System.StringComparison.OrdinalIgnoreCase) < 0)
                    {
                        strLine = this.ReadLine(true);
                    }
                    //查找属性表节点的结束标记“AttributeEnd”
                    strLine = this.ReadLine(true);
                    while (strLine != null && strLine.IndexOf("AttributeEnd", System.StringComparison.OrdinalIgnoreCase) < 0)
                    {
                        strLine = this.ReadLine(true);
                    }

                }
            }
            return null;
        }

		/// <summary>
		/// 读取VCT常量节点
		/// </summary>
		public ConstantNode ReadConstantNode(){

			return null;
		}



		/// <summary>
		/// 读取VCT值对应表节点
		/// </summary>
		public RelationTableNode ReadRelationTableNode(){

			return null;
		}

		/// <summary>
		/// 读取VCT图形表现节点
		/// </summary>
		public RepresentationNode ReadRepresentationNode(){

			return null;
		}

        /// <summary>
        /// 写入VCT头节点
        /// </summary>
        /// <param name="headNode">VCT头节点</param>
        public bool WriteHeadNode(HeadNode headNode)
        {
            if (this.m_streamWriter != null)
            {
                this.m_streamWriter.WriteLine("HeadBegin");
                this.m_streamWriter.WriteLine(headNode);
                this.m_streamWriter.WriteLine("HeadEnd");
                this.m_streamWriter.Flush();
                return true;
            }
            return false;
        }

        ///// <summary>
        ///// 写入VCT要素代码节点
        ///// </summary>
        ///// <param name="featureCodeNode">VCT要素代码节点</param>
        //private bool WriteFeatureCodeNode(FeatureCodeNode featureCodeNode)
        //{
        //    if (this.m_streamWriter != null)
        //    {
        //        this.m_streamWriter.WriteLine(featureCodeNode);
        //        return true;
        //    }
        //    return false;
        //}

        /// <summary>
        /// 写入VCT要素代码节点集合
        /// </summary>
        /// <param name="arrFeatureCodeNode">VCT要素代码节点集合</param>
        public bool WriteFeatureCodeNodes(List<FeatureCodeNode> arrFeatureCodeNode)
        {
            if (this.m_streamWriter != null)
            {
                this.m_streamWriter.WriteLine("FeatureCodeBegin");
                for (int i = 0; i < arrFeatureCodeNode.Count; i++)
                    this.m_streamWriter.WriteLine(arrFeatureCodeNode[i]);
                this.m_streamWriter.WriteLine("FeatureCodeEnd");
                this.m_streamWriter.Flush();
                return true;
            }
            return false;
        }

        ///// <summary>
        ///// 写入VCT属性表结构节点
        ///// </summary>
        ///// <param name="tableStructureNode">VCT属性表结构节点</param>
        //private bool WriteTableStructureNode(TableStructureNode tableStructureNode)
        //{
        //    if (this.m_streamWriter != null)
        //    {
        //        this.m_streamWriter.WriteLine(tableStructureNode);
        //        return true;
        //    }
        //    return false;
        //}

        /// <summary>
        /// 写入VCT属性表结构节点集合
        /// </summary>
        /// <param name="arrTableStructureNode">VCT属性表结构节点集合</param>
        public bool WriteTableStructureNode(List<TableStructureNode> arrTableStructureNode)
        {
            if (this.m_streamWriter != null)
            {
                this.m_streamWriter.WriteLine("TableStructureBegin");
                for (int i = 0; i < arrTableStructureNode.Count; i++)
                    this.m_streamWriter.WriteLine(arrTableStructureNode[i]);
                this.m_streamWriter.WriteLine("TableStructureEnd");
                this.m_streamWriter.Flush();
                return true;
            }
            return false;
        }

        /// <summary>
        /// 写入VCT点实体节点
        /// </summary>
        /// <param name="pointNode">VCT点实体节点</param>
        public bool WritePointNode(PointNode pointNode)
        {
            if (this.m_streamWriter != null)
            {
                if (this.m_bFoundPointBegin == false)
                {
                    this.m_streamWriter.WriteLine("PointBegin");
                    this.m_bFoundPointBegin = true;
                }
                this.m_streamWriter.WriteLine(pointNode);
                return true;
            }
            return false;
        }


        /// <summary>
        /// 写入VCT线实体节点（构面线）
        /// </summary>
        /// <param name="lineNodeEx">VCT线实体节点</param>
        public bool WritePolygonLineNode(LineNodeEx lineNodeEx)
        {
            if (this.m_streamWriter != null)
            {
                if (this.m_bFoundLineBegin == false)
                {
                    if (this.m_bFoundPointBegin == false)
                    {
                        this.m_streamWriter.WriteLine("PointBegin");
                        this.m_bFoundPointBegin = true;
                    }
                    this.m_streamWriter.WriteLine("PointEnd");
                    this.m_streamWriter.WriteLine("LineBegin");
                    this.m_bFoundLineBegin = true;
                }
                //lineNodeEx.t
                //lineNodeEx.StreamWriter = m_streamWriter;
                this.m_streamWriter.WriteLine(lineNodeEx.ToLineString());
                this.m_streamWriter.Flush();
                return true;
            }
            return false;
        }

        /// <summary>
        /// 写入VCT线实体节点
        /// </summary>
        /// <param name="lineNode">VCT线实体节点</param>
        public bool WriteLineNode(LineNode lineNode)
        {
            if (this.m_streamWriter != null)
            {
                if (this.m_bFoundLineBegin == false)
                {
                    if (this.m_bFoundPointBegin == false)
                    {
                        this.m_streamWriter.WriteLine("PointBegin");
                        this.m_bFoundPointBegin = true;
                    }
                    this.m_streamWriter.WriteLine("PointEnd");
                    this.m_streamWriter.WriteLine("LineBegin");
                    this.m_bFoundLineBegin = true;
                }
                //lineNode.StreamWriter = m_streamWriter;
                this.m_streamWriter.WriteLine(lineNode);
                this.m_streamWriter.Flush();
                return true;
            }
            return false;
        }

        /// <summary>
        /// 写入VCT面实体节点
        /// </summary>
        /// <param name="polygonNode">VCT面实体节点</param>
        public bool WritePolygonNode(PolygonNode polygonNode)
        {
            if (this.m_streamWriter!=null&&this.m_streamWriter.StreamWriterTemp != null)
            {
                if (this.m_bFoundPolygonBegin == false)
                {
                    if (this.m_bFoundLineBegin == false)
                    {
                        if (this.m_bFoundPointBegin == false)
                        {
                            this.m_streamWriter.WriteLine("PointBegin");
                            this.m_bFoundPointBegin = true;
                        }
                        this.m_streamWriter.WriteLine("PointEnd");
                        this.m_streamWriter.WriteLine("LineBegin");
                        this.m_bFoundLineBegin = true;
                    }
                    this.m_streamWriter.StreamWriterTemp.WriteLine("LineEnd");
                    this.m_streamWriter.StreamWriterTemp.WriteLine("PolygonBegin");
                    this.m_bFoundPolygonBegin = true;
                }
                this.m_streamWriter.StreamWriterTemp.WriteLine(polygonNode);
                this.m_streamWriter.StreamWriterTemp.Flush();
                return true;
            }
            return false;
        }

        /// <summary>
        /// 写入VCT面实体节点
        /// </summary>
        /// <param name="polygonNode">VCT面实体节点</param>
        public bool WritePolygonNode(PolygonNodeSimple polygonNode)
        {
            if (this.m_streamWriter != null && this.m_streamWriter.StreamWriterTemp != null)
            {
                if (this.m_bFoundPolygonBegin == false)
                {
                    if (this.m_bFoundLineBegin == false)
                    {
                        if (this.m_bFoundPointBegin == false)
                        {
                            this.m_streamWriter.WriteLine("PointBegin");
                            this.m_bFoundPointBegin = true;
                        }
                        this.m_streamWriter.WriteLine("PointEnd");
                        this.m_streamWriter.WriteLine("LineBegin");
                        this.m_bFoundLineBegin = true;
                    }
                    this.m_streamWriter.StreamWriterTemp.WriteLine("LineEnd");
                    this.m_streamWriter.StreamWriterTemp.WriteLine("PolygonBegin");
                    this.m_bFoundPolygonBegin = true;
                }
                this.m_streamWriter.StreamWriterTemp.WriteLine(polygonNode);
                this.m_streamWriter.StreamWriterTemp.Flush();
                return true;
            }
            return false;
        }

		/// <summary>
		/// 写入VCT注记实体节点
		/// </summary>
		/// <param name="annotationNode">VCT注记实体节点</param>
		public bool WriteAnnotationNode(AnnotationNode annotationNode)
        {
            if (this.m_streamWriter != null)
            {
                if (this.m_bFoundAnnotationBegin == false)
                {
                    if (this.m_bFoundPolygonBegin == false)
                    {
                        if (this.m_bFoundLineBegin == false)
                        {
                            if (this.m_bFoundPointBegin == false)
                            {
                                this.m_streamWriter.WriteLine("PointBegin");
                                this.m_bFoundPointBegin = true;
                            }
                            this.m_streamWriter.WriteLine("PointEnd");
                            this.m_streamWriter.WriteLine("LineBegin");
                            this.m_bFoundLineBegin = true;
                        }
                        this.m_streamWriter.StreamWriterTemp.WriteLine("LineEnd");
                        this.m_streamWriter.StreamWriterTemp.WriteLine("PolygonBegin");
                        this.m_bFoundPolygonBegin = true;
                    }
                    this.m_streamWriter.StreamWriterTemp.WriteLine("PolygonEnd");
                    this.m_streamWriter.StreamWriterTemp.WriteLine("AnnotationBegin");
                    this.m_bFoundAnnotationBegin = true;
                }
                this.m_streamWriter.StreamWriterTemp.WriteLine(annotationNode);
                this.m_streamWriter.StreamWriterTemp.Flush();
                return true;
            }
            return false;
		}

        /// <summary>
        /// 写入VCT属性表节点
        /// </summary>
        /// <param name="tableNode">VCT属性表节点</param>
        public bool WriteTableNode(TableNode tableNode)
        {
            if (this.m_streamWriter != null)
            {
                if (this.m_bFoundTableBegin == false)
                {
                    if (this.m_bFoundAnnotationBegin == false)
                    {
                        if (this.m_bFoundPolygonBegin == false)
                        {
                            if (this.m_bFoundLineBegin == false)
                            {
                                if (this.m_bFoundPointBegin == false)
                                {
                                    this.m_streamWriter.WriteLine("PointBegin");
                                    this.m_bFoundPointBegin = true;
                                }
                                this.m_streamWriter.WriteLine("PointEnd");
                                this.m_streamWriter.WriteLine("LineBegin");
                                this.m_bFoundLineBegin = true;
                            }
                            this.m_streamWriter.StreamWriterTemp.WriteLine("LineEnd");
                            this.m_streamWriter.StreamWriterTemp.WriteLine("PolygonBegin");
                            this.m_bFoundPolygonBegin = true;
                        }
                        this.m_streamWriter.StreamWriterTemp.WriteLine("PolygonEnd");
                        this.m_streamWriter.StreamWriterTemp.WriteLine("AnnotationBegin");
                        this.m_bFoundAnnotationBegin = true;
                    }
                    this.m_streamWriter.StreamWriterTemp.WriteLine("AnnotationEnd");
                    this.m_streamWriter.StreamWriterTemp.WriteLine("AttributeBegin");
                    this.m_bFoundTableBegin = true;
                }
                this.m_streamWriter.StreamWriterTemp.WriteLine(tableNode);
                this.m_streamWriter.StreamWriterTemp.Flush();
                return true;
            }

            return false;
        }

        /// <summary>
        /// 写入VCT属性记录节点
        /// </summary>
        /// <param name="recordNode">VCT属性记录节点</param>
        /// <param name="bEndRecord">是否是表的最后一行属性记录</param>
        public bool WriteRecordNode(RecordNode recordNode, bool bEndRecord)
        {
            if (this.m_streamWriter != null)
            {
                if(recordNode!=null)
                    this.m_streamWriter.StreamWriterTemp.WriteLine(recordNode);
                if (bEndRecord == true)
                    this.m_streamWriter.StreamWriterTemp.WriteLine("TableEnd");
                this.m_streamWriter.StreamWriterTemp.Flush();
                return true;
            }

            return false;
        }

        /// <summary>
        /// 写入VCT变长字符串节点
        /// </summary>
        public bool WriteVarcharNode()
        {
            if (this.m_streamWriter != null)
            {
                this.m_streamWriter.StreamWriterTemp.WriteLine("VarcharBegin");
                this.m_streamWriter.StreamWriterTemp.WriteLine("VarcharEnd");
                this.m_streamWriter.StreamWriterTemp.WriteLine("AttributeEnd");
                this.m_streamWriter.StreamWriterTemp.Flush();
                return true;
            }

            return false;
        }

        /// <summary>
        /// 写入VCT变长字符串节点
        /// </summary>
        /// <param name="varcharNode">VCT变长字符串节点</param>
        public bool WriteVarcharNode(VarcharNode varcharNode)
        {
            return WriteVarcharNode();
        }

        /// <summary>
        /// 写入图形表现节点
        /// </summary>
        public bool WriteStyleNode()
        {
            if (this.m_streamWriter != null)
            {
                this.m_streamWriter.StreamWriterTemp.WriteLine("StyleBegin");
                WriteConstantNode();
                WriteRelationTableNode();
                WriteRepresentationNode();
                this.m_streamWriter.StreamWriterTemp.WriteLine("StyleEnd");
                this.m_streamWriter.StreamWriterTemp.Flush();
                return true;
            }

            return false;        
        }

        /// <summary>
        /// 写入VCT常量节点
        /// </summary>
        private bool WriteConstantNode()
        {
            this.m_streamWriter.StreamWriterTemp.WriteLine("ConstantBegin");
            this.m_streamWriter.StreamWriterTemp.WriteLine("ConstantEnd");
            this.m_streamWriter.StreamWriterTemp.Flush();
            return true;
        }

		/// <summary>
		/// 写入VCT常量节点
		/// </summary>
		/// <param name="constantNode">VCT常量节点</param>
        public bool WriteConstantNode(ConstantNode constantNode)
        {
            return WriteConstantNode();
		}

        /// <summary>
        /// 写入VCT值对应表节点
        /// </summary>
        private bool WriteRelationTableNode()
        {
            this.m_streamWriter.StreamWriterTemp.WriteLine("RelationTableBegin");
            this.m_streamWriter.StreamWriterTemp.WriteLine("RelationTableEnd");
            this.m_streamWriter.StreamWriterTemp.Flush();
            return true;
        }

		/// <summary>
		/// 写入VCT值对应表节点
		/// </summary>
		/// <param name="relationTableNode">VCT值对应表节点</param>
		public bool WriteRelationTableNode(RelationTableNode relationTableNode)
        {
            return WriteRelationTableNode();
		}

        /// <summary>
        /// 写入VCT图形表现节点
        /// </summary>
        private bool WriteRepresentationNode()
        {
            this.m_streamWriter.StreamWriterTemp.WriteLine("RepresentationBegin");
            this.m_streamWriter.StreamWriterTemp.WriteLine("RepresentationEnd");
            this.m_streamWriter.StreamWriterTemp.Flush();
            return true;
        }

		/// <summary>
		/// 写入VCT图形表现节点
		/// </summary>
		/// <param name="representationNode">VCT图形表现节点</param>
		public bool WriteRepresentationNode(RepresentationNode representationNode)
        {
            return WriteRepresentationNode();
		}

        ///// <summary>
        ///// 将缓存数据写入基础流
        ///// </summary>
        //public void Flush()
        //{
        //    if (!m_bRead && m_streamWriter != null)
        //        m_streamWriter.Flush();
        //}
	}//end VCTFile


    public enum EnumVCT2MDBExchangeInfo
    {
        /// <summary>
        /// 转换成功
        /// </summary>
        EXCHANGESUCCESS=0,


        /// <summary>
        /// 读取头文件错误
        /// </summary>
        HEADFILEERROR=1,

        /// <summary>
        /// 读取数据集信息错误
        /// </summary>
        DATASETERROR=2,

        /// <summary>
        /// 获取要素代码错误
        /// </summary>
        FEATURECODEERROR=3,

        /// <summary>
        /// 获取表结构错误
        /// </summary>
        FEATURESTRUCT=4,

        /// <summary>
        /// 获取VCT实体错误
        /// </summary>
        FEATUREENTY=5,

        /// <summary>
        /// 获取VCT实体属性错误
        /// </summary>
        FEATUREATRRIBUTE = 6,

        /// <summary>
        /// 转换未知异常
        /// </summary>
        EXCHANGUNKNOWEERROR = 7,

        /// <summary>
        /// 转换失败
        /// </summary>
        EXCHANGEFAIL = 8,

        /// <summary>
        /// 空间参考获取失败
        /// </summary>
        PROJECTIONERROR = 9,


        /// <summary>
        /// 空间参考获取失败，设置默认空间参考转换成功
        /// </summary>
        SUCCESSWITHDEFAULTPROJECTION = 10,

    }
}//end namespace VCT