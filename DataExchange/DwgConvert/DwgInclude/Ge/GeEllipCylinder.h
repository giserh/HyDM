//////////////////////////////////////////////////////////////////////////////
// Copyright © 2002, Open Design Alliance Inc. ("Open Design") 
// 
// This software is owned by Open Design, and may only be incorporated into 
// application programs owned by members of Open Design subject to a signed 
// Membership Agreement and Supplemental Software License Agreement with 
// Open Design. The structure and organization of this Software are the valuable 
// trade secrets of Open Design and its suppliers. The Software is also protected 
// by copyright law and international treaty provisions. You agree not to 
// modify, adapt, translate, reverse engineer, decompile, disassemble or 
// otherwise attempt to discover the source code of the Software. Application 
// programs incorporating this software must include the following statment 
// with their copyright notices:
//
//      DWGdirect © 2002 by Open Design Alliance Inc. All rights reserved. 
//
// By use of this software, you acknowledge and accept the terms of this 
// agreement.
///////////////////////////////////////////////////////////////////////////////
// AE 08.09.2003 - Begin 


#ifndef OD_GEELLIPCYLNDR_H
#define OD_GEELLIPCYLNDR_H /* {Secret} */




#include "GeSurface.h"
#include "GeInterval.h"
#include "OdPlatformSettings.h"

class OdGeCircArc3d;

#include "DD_PackPush.h"

/**
    Description:
    This class represents elliptical cylinders.

    Remarks:
    An eliptical cylinder is defined by its

    o   major and minor radii
    o   *origin* (a *point* on the axis of symmetry)
    o   axis of symmetry
    o   major axis
    o   height

    It is generated by a line parallel to the axis of symmetry,
    along an eliptical path. 

    The cylinder is parameterized as follows:

    The V parameter is the angle of revolution, measured from the major axis
    to the axis of symmetry. The right hand rule applied along the 
    direction of the axis of symmetry positive
    angles.  For a closed cylinder, V defaults to [-OdaPI, OdaPI).

    Parameter U varies along the axis of symmetry.  U is dimensionless,
    and increases in the direction of the axis of symmetry. 
    U = 0 corresponds to center of the base of this cylinder, 
    and U = 1 corresponds to the center of the top of this cylinder.  

    The surface of the cylinder is perodic in V with a period of Oda2PI.

    [umin, umax] x [vmin, vmax] defines a four sided cylindrical
    patch bounded by two straight lines (at vmin and vmax), and
    two circular arcs (at umin and umax).  The following constraints
    apply to the definition of a cylindrical patch:

    o umin < umax
    o |vmax - vmin| <= Oda2PI
    o majorRadius > 0.0
    o minorRadius > 0.0
 
    The angle of a *point* on an ellipse is measured by projecting
    the *point* along a vector perpendicular to the major axis onto a
    circle whose *center* is the *center* of this *ellipse* and whose
    radius is the major radius of this *ellipse*.

    The angle between the major axis of the ellipse, and a vector from
    the *center* of the *ellipse* to the intersection point with the circle, 
    measured counterclockwise, is the angle of the *point* on the ellipse.


    Library: Ge

    {group:OdGe_Classes} 
*/
class GE_TOOLKIT_EXPORT OdGeEllipCylinder : public OdGeSurface
{
public:
  /**
    Arguments:
    majorRadius (I) The major radius of this elliptical cylinder.
    minorRadius (I) The minor radius of this elliptical cylinder.
    origin (I) The *origin* of this elliptical cylinder.
    axisOfSymmetry (I) Axis of symmetry (rotation).
    majorAxis (I) The major axis of this elliptical cylinder.
    height (I) Height *interval* of this cylinder.
    startAng (I) Starting angle of this elliptical cylinder.
    endAng (I) Ending angle of this elliptical cylinder.
    Note:
    All angles are expressed in radians.

  */
  OdGeEllipCylinder ();
  OdGeEllipCylinder (
    double minorRadius, 
    double majorRadius,
    const OdGePoint3d& origin,
    const OdGeVector3d& axisOfSymmetry);
  OdGeEllipCylinder (
    double minorRadius, 
    double majorRadius,
    const OdGePoint3d& origin,
    const OdGeVector3d& axisOfSymmetry,
    const OdGeVector3d& majorAxis,
    const OdGeInterval& height,
    double startAng, 
    double endAng);

  // Run time type information.

  bool isKindOf (
    OdGe::EntityId entType) const;
  OdGe::EntityId type () const;

  virtual OdGePoint2d paramOf (
    const OdGePoint3d& point,
    const OdGeTol& tol = OdGeContext::gTol) const;

  virtual OdGePoint3d evalPoint (
    const OdGePoint2d& param) const;
  virtual OdGePoint3d evalPoint (
    const OdGePoint2d& param, 
    int numDeriv,
    OdGeVector3dArray& derivatives, 
    OdGeVector3d& normal) const;
  DD_USING (OdGeSurface::evalPoint);

  // Make a copy of the entity.
  
  OdGeEntity3d* copy () const;

  // Geometric properties.
  //

  /**
    Description:
    Returns the ratio of the minor to the major radius of this cylinder.
  */
  double radiusRatio () const { return m_minorRadius / fabs (m_majorRadius); }

  /**
    Description:
    Returns the minor radius of this cylinder.
  */
  double minorRadius () const { return m_minorRadius; }


  /**
    Description:
    Returns the major radius of this cylinder.
  */
  double majorRadius () const { return fabs (m_majorRadius); }

  /**
    Description:
    Returns the *origin* of this cylinder.
  */
  OdGePoint3d origin () const { return m_origin; } 

  /**
    Description:
    Returns the starting and ending angles of this cylinder.

    Arguments:
    startAng (O) Receives the start angle.
    endAng (O) Receives the end angle.
    Note:
    All angles are expressed in radians.

  */
  void getAngles (
    double& startAng, 
    double& endAng) const 
    { startAng = m_startAngle; endAng = m_endAngle; }

  /**
    Description:
    Returns the interval of the axis of symmetry.

    Arguments:
    height (O) Receives the interval of the axis of symmetry.
  */
  void getHeight (
    OdGeInterval& height) const { height = m_height; }    

  /**
    Description:
    Returns the *height* of this cylinder corresponding to
    the specified position on the U-axis.
    Remarks:
    Parameter U varies along the axis of symmetry.  U is dimensionless,
    and increases in the direction of the axis of symmetry. 

    Arguments:
    u (I) Position on the U-axis of this cylinder.
  */
  double heightAt (
    double u) const { return u; }

  /**
    Description:
    Returns the axis of symmetry of this cylinder.
  */
  OdGeVector3d axisOfSymmetry () const { return m_axisOfSymmetry; }

  /**
    Description:
    Returns the major axis of this cylinder.
  */
  OdGeVector3d majorAxis () const { return m_majorAxis; }

  /**
    Description:
    Returns the minor axis of this cylinder.
  */
  OdGeVector3d minorAxis () const;

  /**
    Description:
    Returns true if and only if the *normal* to this surface
    is pointing outward.
  */
  bool isOuterNormal () const;    

  /**
    Description
    Returns true if and only if this cylinder
    is a full ellipse within the specified tolerance.

    Arguments:
    tol (I) Geometric tolerance.
  */
  bool isClosed (
    const OdGeTol& tol = OdGeContext::gTol) const;

  bool isClosedInU (
    const OdGeTol& tol = OdGeContext::gTol) const;
  bool isClosedInV (
    const OdGeTol& tol = OdGeContext::gTol) const;

  /** Description:
    Sets OuterNormal according to the parameter.

    Arguments:
    isOuterNormal (I) Sets OuterNormal.
  */
  void setIsOuterNormal (
    bool isOuterNormal);

  /** Description:
    Sets minor radius of this elliptical cylinder.

    Arguments:
    minorRadius (I) The minor radius of this elliptical cylinder.
  */
  OdGeEllipCylinder& setMinorRadius (
    double minorRadius)
    {
      m_minorRadius = fabs (minorRadius);
      return *this;
    }

  /** Description:
    Sets major radius of this elliptical cylinder.

    Arguments:
    majorRadius (I) The major radius of this elliptical cylinder.
  */
  OdGeEllipCylinder& setMajorRadius (
    double majorRadius)
    {
      if (isOuterNormal ())
        m_majorRadius = majorRadius < 0.0 ? majorRadius : -majorRadius;
      else
        m_majorRadius = majorRadius > 0.0 ? majorRadius : -majorRadius;
      return *this;
    }

  /** Description:
    Sets the starting and ending angles of this elliptical cylinder.

    Arguments:      
    startAng (I) Start angle.
    endAng (I) End angle.
    Note:
    All angles are expressed in radians.

  */
  OdGeEllipCylinder& setAngles (
    double startAng, 
    double endAng);

  /**
    Description:
    Sets the *height* interval of this elliptical cylinder.

    Arguments:      
    height (I) Height *interval* of this elliptical cylinder.
  */
  OdGeEllipCylinder& setHeight (
    const OdGeInterval& height);

  /**
    Description:
    Sets the parameters for this cylinder according to the arguments, 
    and returns a reference to this cylinder.

    Arguments:
    majorRadius (I) The major radius of this elliptical cylinder.
    minorRadius (I) The minor radius of this elliptical cylinder.
    origin (I) The *origin* of this elliptical cylinder.
    axisOfSymmetry (I) Axis of symmetry (rotation).
    majorAxis (I) The major axis of this elliptical cylinder.
    height (I) Height *interval* of this cylinder.
    startAng (I) Starting angle of this elliptical cylinder.
    endAng (I) Ending angle of this elliptical cylinder.
    Note:
    All angles are expressed in radians.

  */
  OdGeEllipCylinder& set (
    double minorRadius,
    double majorRadius, 
    const OdGePoint3d& origin, 
    const OdGeVector3d& axisOfSymmetry);
  OdGeEllipCylinder& set (
    double minorRadius, 
    double majorRadius,
    const OdGePoint3d& origin,
    const OdGeVector3d& axisOfSymmetry,
    const OdGeVector3d& majorAxis,
    const OdGeInterval& height,
    double startAng, 
    double endAng);


  /**
    Description:
    Returns true if and only if this cylinder intersects with
    a line entity, and returns the number of intersections and the
    points of intersection.

    Arguments:
    lineEnt (I) Any 3D *line* entity.
    numInt (O) Receives the number of intersections.
    p1 (O) Receives the first intersection *point*.
    p2 (O) Receives the second intersection *point*.
    tol (I) Geometric tolerance.

    Remarks:
    o p1 is valid if and only if numInt >= 1.
    o p2 is valid if and only if numInt == 2.
  */
  bool intersectWith (
    const OdGeLinearEnt3d& linEnt, 
    int& numInt,
    OdGePoint3d& p1, 
    OdGePoint3d& p2,
    const OdGeTol& tol = OdGeContext::gTol) const;

  void getEnvelope (
    OdGeInterval& intrvlU, 
    OdGeInterval& intrvlV) const;

  virtual bool project (
    const OdGePoint3d& p, 
    OdGePoint3d& projP) const;

private:
  double m_minorRadius;
  double m_majorRadius;
  double m_startAngle;
  double m_endAngle;
  OdGeInterval m_height;
  OdGeVector3d m_axisOfSymmetry;
  OdGeVector3d m_majorAxis;
  OdGePoint3d m_origin;
};



#include "DD_PackPop.h"

#endif // OD_GEELLIPCYLNDR_H
// AE - End 

